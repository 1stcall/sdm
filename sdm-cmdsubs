#!/bin/bash
#
# This file is sourced by sdm for the burn and shrink commands
# It is not callable by anything other than sdm
# because it needs access to a bazillion variables defined
# in sdm, so can only run in the context of sdm. 
#
function write_burnmsg() {
    #
    # $1 has the message to write
    # It's written to the terminal and added to burnmsg
    #
    burnmsg+=("$(thisdate) $1")
    echo "$1"
    return 0
}    

function ddctrlc() {
    printf "\n%% Caught CTRL/C during burn. Cleaning up...\n"
    if [ "$ddpid" != "" ]
    then
	#echo "killing $ddpid"
	kill -HUP $ddpid > /dev/null 2>&1
	wait $ddpid > /dev/null 2>&1
	exit 1
    fi
}

function setdiskid() {
    local dev="$1" diskid="$2"
    sfdisk --disk-id $dev 0x${diskid}
    if [ $? -ne 0 ]    # Assume it's an older version of sfdisk without --disk-id if it fails
    then
	write_burnmsg "% sfdisk failed; Trying fdisk to set Disk ID"
        fdisk "$dev" > /dev/null <<EOF
x
i
0x$diskid
r
w
EOF
        errifrc $? "? fdisk error "
	write_burnmsg "> Disk ID $diskid set successfully with fdisk"
    else
	write_burnmsg "> Disk ID $diskid set successfully with sfdisk"
    fi
}

function sdm_burndevfile() {

    # Stash burn messages in an array until log on SD Card is mounted and available 
    declare -x SDMNSPAWN="Burn0"
    declare -a burnmsg
    newdiskid="$(printf  "%08x" "$(((RANDOM*RANDOM*RANDOM*RANDOM+RANDOM)&0xFFFFFFFF))")"
    if [ $burn -eq 1 ]
    then
	#
	# Burning to a device
	#
	[ "$burndev" == "" ] && errexit "? No storage device specified"
	perr=0
	for p in 1 2 3 4
	do
	    [[ "$burndev" =~ "mmcblk" ]] && pn="p${p}" || pn=$p
	    pdev="${burndev}${pn}"
	    ismounted $pdev && echo "? Partition $pdev is mounted" && perr=1
	done
	[ $perr -eq 1 ] && errexit "? Use 'sudo umount' to unmount each mounted partition, then redo the burn command"
	ismounted $burndev && errexit "? Device '$burndev' is mounted"
	[ ! -b $burndev ] && errexit "? '$burndev' is not a block device"
	bsize=$(stat --printf %s $dimg)
	write_burnmsg "* Burn '$dimg' $(getgbstr $bsize) to '$burndev'..."
	burnmsg+=("$(thisdate) > Burn command line: $cmdline")
	ddcmd="dd if=$dimg of=$burndev status=progress $ddsw"
	burnmsg+=("$(thisdate) > dd command: $ddcmd")
	# Burn the IMG to the device but zero first and last blocks first
	zero1stlast $burndev
	echo "$ddcmd"
	trap "ddctrlc" SIGINT
	$ddcmd &
	ddpid=$!
	wait $ddpid > /dev/null 2>&1
	[ $? -ne 0 ] && errexit "? Exiting due to dd error"
	trap SIGINT
	burnmsg+=("$(thisdate) > dd Copy completed")
	# Prevent mount errors
	sync ; sleep 1 ; sync
	p1="1" ; p2="2"
	[[ "$burndev" =~ "mmcblk" ]] && p1="p1" && p2="p2"
	if [ $expandroot -eq 1 ]
	then
	    expandpartition $burndev 0 write_burnmsg
	fi
	olddiskid="$((blkid -o value $burndev) | (read id ; echo $id))"
	write_burnmsg "> Set new disk ID '$newdiskid' on '$burndev'"
	setdiskid $burndev $newdiskid
	sync ; sleep 1 ; sync
	declare -x SDMPT=$(makemtpt)
	domount "$burndev" "Device"
    else
	#
	# Burning to a file
	#
	[ "$burnfilefile" == "" ] && errexit "? No Output IMG file specified"
	[ -f $burnfilefile ] && errexit "? Output IMG file '$burnfilefile' exists"
	bsize=$(stat --printf %s $dimg)
	write_burnmsg "* Burn '$dimg' $(getgbstr $bsize) to Output IMG '$burnfilefile'..."
	burnmsg+=("$(thisdate) > Burn IMG command line: $cmdline")
	# cp will fail if not on a COW (btrfs) file system
	cp --reflink=always $dimg $burnfilefile 2>/dev/null
	if [ $? -eq 0 ]
	then
	    burnmsg+=("$(thisdate) > Burn IMG using 'cp' on copy-on-write file system")
	else
	    ddcmd="dd if=$dimg of=$burnfilefile status=progress $ddsw"
	    burnmsg+=("$(thisdate) > dd command: $ddcmd")
	    # Burn the IMG to the file
	    echo "$ddcmd"
	    trap "ddctrlc" SIGINT
	    $ddcmd &
	    ddpid=$!
	    wait $ddpid > /dev/null 2>&1
	    [ $? -ne 0 ] && errexit "? Exiting due to dd error"
	    trap SIGINT
	    burnmsg+=("$(thisdate) > Image copy completed")
	fi
	olddiskid="$((blkid -o value $burnfilefile) | (read id ; echo $id))"
	loopdev=$(losetup --show -P -f $burnfilefile)
	sync ; sleep 1 ; sync
	write_burnmsg "> Set new disk ID '$newdiskid' on '$burnfilefile'"
	setdiskid $loopdev $newdiskid
	losetup -d $loopdev
	sync ; sleep 1 ; sync
	declare -x SDMPT=$(makemtpt)
	domount "$burnfilefile" "IMG"
	expandroot=1           # Force Expand Root into the newly written IMG so it will happen when burned to something with sdm
    fi
    if [ -f $SDMPT/boot/firmware/cmdline.txt ]
    then
	write_burnmsg "> Set new Disk ID '$newdiskid' in /etc/fstab and /boot/firmware/cmdline.txt"
	sed -i 's| sdhci\.debug_quirks2=4||' $SDMPT/boot/firmware/cmdline.txt
	sed -i "s/${olddiskid}/${newdiskid}/" $SDMPT/boot/firmware/cmdline.txt
	# init_resize disappeared in 2022-09-06 build, not in systems with /boot/firmware
    elif [ -f $SDMPT/boot/cmdline.txt ]
    then
	write_burnmsg "> Set new Disk ID '$newdiskid' in /etc/fstab and /boot/cmdline.txt"
	sed -i 's| sdhci\.debug_quirks2=4||' $SDMPT/boot/cmdline.txt
	sed -i "s/${olddiskid}/${newdiskid}/" $SDMPT/boot/cmdline.txt
	# init_resize disappeared in 2022-09-06 build, but keep this here for older IMGs
	sed -i 's| init=/usr/lib/raspi-config/init_resize\.sh||' $SDMPT/boot/cmdline.txt
    fi
    sed -i "s/${olddiskid}/${newdiskid}/g" $SDMPT/etc/fstab
    #
    # Write out the accumulated messages into mounted image if image has been customized
    #
    if [ -d $SDMPT/etc/sdm ]
    then
	write_burnmsg "> Flush accumulated burn log messages"
	for (( i=0 ; i < ${#burnmsg[@]} ; i++ ))
	do
	    echo "${burnmsg[$i]}" >> $SDMPT/etc/sdm/history
	done
	#
	# Burn messages are written, all further messages written with logtoboth, which will write them to the terminal
	# and to $SDMPT/etc/sdm/history in the mounted image or image file
	#
	xsettings="autologin b0script b1script bootscripts burnplugins domain expandroot exports fchroot hname fredact fnoexpandroot myuser noreboot"
	xsettings="$xsettings nowaittimesync plugindebug plugins reboot rebootwait regensshkeys"
	# Save settings made with the --burn command
	# Define variable b<varname> for each <varname>
	for e in $xsettings
	do
	    eval b$e=\${!e}
	done
	source $SDMPT/etc/sdm/sdm-readparams                   # Read settings from the SD card
	# Update settings with settings from cmd line as appropriate
	[ "$bb0script" != "$b0script" ] && b0script=$bb0script
	[ "$bb1script" != "$b1script" ] && b1script=$bb1script
	[ "$bdomain" != "" ] && domain=$bdomain
	[ $breboot -eq 1 ] && reboot=1
	[ $bnoreboot -eq 1 ] && reboot=0 && noreboot=1
	[ $bbootscripts -eq 1 ] && bootscripts="$bbootscripts"
	[ $brebootwait -ne $drebootwait ] && rebootwait=$brebootwait
	[ "$bhname" != "" ] && hname="$bhname"
	plugins="$bplugins"
	[ $bautologin -eq 1 ] && autologin=1
	[ "$bburnplugins" != "" ] && burnplugins=$bburnplugins
	expandroot=$((bexpandroot|expandroot))
	fchroot=$((bfchroot|fchroot))
	fnoexpandroot=$((bfnoexpandroot|fnoexpandroot))
	regensshkeys=$((bregensshkeys|regensshkeys))
	nowaittimesync=$((bnowaittimesync|nowaittimesync))
	plugindebug=$((bplugindebug|plugindebug))
	[ "$hname" == "" ] && echo "% hostname not specified with --host; will not be written"
	# --bupdate must specified on the burn command line
	initvirt logtoboth  # Must be done after fchroot is set
	[ "$bupdate" != "" ] && checkupdsdm update "$bupdate" || checkupdsdm check "$bupdate"
	if ispluginselected parted "$burnplugins"
	then
	    logtoboth "> Force --no-expand-root for parted burn-plugin"
	    fnoexpandroot=1
	fi
	if [ $fnoexpandroot -eq 1 ]
	then
	    logtoboth "> Force --regen-ssh-host-keys for --no-expand-root"
	    regensshkeys=1
	fi
	if [ $((fnoexpandroot|expandroot)) -eq 1 -a $regensshkeys -eq 1 ]
	then
	    logtoboth "> Disable unneeded RasPiOS firstboot service and /etc/init.d/resize2fs_once"
	    [ -f $SDMPT/boot/cmdline.txt ] && sed -i 's| init=/usr/lib/raspberrypi-sys-mods/firstboot||' $SDMPT/boot/cmdline.txt
	    [ -f $SDMPT/boot/firmware/cmdline.txt ] && sed -i 's| init=/usr/lib/raspberrypi-sys-mods/firstboot||' $SDMPT/boot/firmware/cmdline.txt
	    [ -f $SDMPT/etc/init.d/resize2fs_once ] && mv $SDMPT/etc/init.d/resize2fs_once $SDMPT/etc/init.d/.sdm.resize2fs_once
	else
	    logtoboth "> RasPiOS firstboot service not disabled; at least one of --expand-root and --regen-ssh-host-keys not set"
	fi
	if [ $regensshkeys -eq 1 ]
	then
	    logtoboth "> Disable regenerate_ssh_host_keys service; First Boot will run it instead"
	    sdm_runspawncmd Burn1 run-command-quietly "systemctl disable regenerate_ssh_host_keys"
	    touch $SDMPT/etc/ssh/sshd_not_to_be_run
	fi
	#
	# Set hostname into the image
	#
	[ "$hname" != "" ] && updatehostname $hname

	#if [[ "$loadllocal" =~ "|wifi|" ]]
	#then
	    #[ "$wificountry" == "" ] && logtoboth "% No --wifi-country specified with --loadlocal wifi; Using 'US' for a short time" && wificountry="US"
	#fi
	if [ "$bkeymap" != "" ]
	then
	    logtoboth "> Load Keymap '$keymap' to set during FirstBoot"
	    keymap=$bkeymap
	fi
	if [ "$b1script" != "" ]
	then
	    if [ -f $b1script ]
	    then
		if [ ! -f $SDMPT/etc/sdm/assets/$(basename $b1script) ]
		then
		    logtoboth "> Copy '$b1script' to /etc/sdm/assets"
		    cp -a $b1script $SDMPT/etc/sdm/assets
		    setfileownmode $SDMPT/etc/sdm/assets/$(basename $b1script) 755
		fi
	    else
		if [ ! -f $SDMPT/etc/sdm/assets/$(basename $b1script) ]
		then
		   logtoboth "? --b1script '$b1script' not found"
		   b1script=""
		fi
	    fi
	fi
	hostname="$hname"         # So it gets written to updated params on SD card
	[ $bootscripts -eq 1 ] && state="enabled" || state="disabled"
	logtoboth "> First System Boot Custom Boot Scripts $state"
	[ $rebootwait -ne $drebootwait ] && wmsg=" with a $rebootwait second wait" || wmsg=""
	[ $reboot -eq 1 ] && state="enabled${wmsg}" || state="disabled"
	logtoboth "> First System Boot automatic restart $state"
	writeconfig               # Write updated params to the SD card so they are available in the following and at boot
	if [ "$b0script" != "" ]
	then
	    logtoboth "> Execute function 'do_b0script' in --b0script '$b0script'"
	    source $b0script
	    ftype=$(type -t do_b0script)
	    [ "$ftype" == "function" ] && do_b0script || logtoboth "% Function 'do_b0script' not found in '$b0script'; Skipping..."
	fi
	if [ "$plugins" != "" ]
	then
	    plugin_logorder "$plugins"
	    runplugins_exit "$plugins" 0
	fi

	[ -d $SDMPT/etc/lightdm ] && xldm=1 || xldm=0

	if [ "$b1script" != "" ]
	then
	    logtoboth "> Run --b1script '$b1script'"
	    sdm_runspawncmd Burn1 b1script "$b1script"
	fi

	cmyuser="$myuser"
	    
	if [ "$plugins" != "" ]
	then
	    sdm_runspawncmd Burn1 run-plugin-list 1 "$plugins" || exit
	    sdm_runspawncmd Burn1 run-plugin-list post-install "$plugins" || exit
	    # Set lightdm burn enable delay if it was installed as part of burning
	    [ -d $SDMPT/etc/lightdm -a $xldm -eq 0 ] && sdm_runspawncmd Burn1 burn-enable-lightdm-delay
	    source $SDMPT/etc/sdm/sdm-readparams       #Reread in case it got updated running plugins (e.g. myuser from user plugin)
	    plugins="$bplugins"
	fi

	resetpluginlist
	#
	# Redact passwords if requested
	#
	if [[ $bfredact -eq 1 ]]
	then
	    logtoboth "> Redact passwords from /etc/sdm/cparams and /etc/sdm/history"
	    runoneplugin user redact "redact"
	fi

	declare -x SDMNSPAWN="Burn0"
	logtoboth "* Burn Completed"
    else
	echo $"% IMG '$dimg' is not sdm-enhanced
  Logs and configuration updates will not be written"
	[ "$b0script" != "" ] && echo "  and b0script '$b0script' will not be processed"
	[ "$b1script" != "" ] && echo "  and b1script '$b1script' will not be processed"
	[ "$hname" != "" ] && updatehostname $hname
    fi
    #
    # Call burn-plugins
    #
    docleanup

    # Redefine logtoboth so it just does an "echo" as the log is inaccessible from now on
    function logtoboth() {
	echo "$1"
    }

    if [ "$burnplugins" != "" ]
    then
	logtoboth "* Run Post-Burn plugins"
	[ "$burndev" != "" ] && imgtype="Device"
	[ "$burnfilefile" != "" ] && imgtype="IMG"
	runplugins_exit "$burnplugins" burn-complete "burndev=$burndev|burnfilefile=$burnfilefile|imgtype=$imgtype"
    fi
}
#
# Print partitions in IMG 
#
sdm_ppart() {
    echo "* Human-readable partition list"
    parted -s $dimg unit B print
    echo ""
    echo "* Machine-readable partition list"
    parted -ms $dimg unit B print
    #echo "0: filespec:bytesB:file:512:512:msdos::;"
    #echo "1: partnum:startB:endB:sizeB:fstype:::;"
    #echo "2 partnum:startB:endB:sizeB:fstype:::;"
}
#
# Shrink IMG file
#
sdm_shrink() {

    [ $dimgdev -eq 1 ] && errexit "? --shrink only operates on IMG files"
    loopdev=""
    fstype=""
    fsize=""
    bsize=$(stat --printf %s $dimg)
    rc=0
    echo "* Start shrink on IMG '$dimg'"
    while read line
    do
	if [[ "$line" =~ "msdos" ]]
	then
	    fsize=$(IFS=":" read fs bytes file n1 n2 fs <<< $line ; echo $bytes)
	    fsize=${fsize%B}
	elif [[ "$line" =~ "ext4" ]]
	then
	    IFS=":;" read partnum partstart partend partsize fstype etc etc2 etc3 <<< $line
	    partstart=${partstart%B}
	    partend=${partend%B}
	    partsize=${partsize%B}
	fi
    done < <(parted -ms $dimg unit B print)
    #
    #   https://alioth-lists.debian.net/pipermail/parted-devel/2006-December/000573.html
    # $l1: BYT;  ** error if not BYT 
    # $l2: filespec:bytesB:file:512:512:msdos::;
    # $l3: partnum:startB:endB:sizeB:fstype:::;
    # $l4: partnum:startB:endB:sizeB:fstype:::;
    #
    [ "$fstype" != "ext4" -o "$fsize" == "" ] && errexit "? IMG '$dimg' does not appear to be a RasPiOS IMG with two partitions"
    if [ $fsize -ne $bsize ]
    then
	errexit "? Discrepancy between stat and parted on file size; parted size: $fsize  stat size: $bsize"
    fi
    # Get partition type information for the 2nd partition (ext4)
    # ** Is this needed? it will fail miserably later which might be OK
#    pline=$(parted -s $dimg unit B print | grep ext4)     # Slightly different than parted done above (no -m)
#    if [[ "$pline" =~ "ext4" ]]
#    then
#	IFS=" " read p1 p2 p3 p4 parttype p6 <<< $pline
#	[ "$parttype" != "primary" ] && errexit "Partition type '$parttype' not supported"
#    else
#	errexit "? No ext4 partition found"
#    fi

    # Create loop device to the partition
    # Commented-out loggers and echos for debugging kernel log messages
    [ $plugindebug -eq 1 ] && logger "Create loop device"
    loopdev=$(losetup -f --show -o "$partstart" "$dimg")
    # bx is a dummy due to leading ",". Other 2 can be in either order
    IFS="," read bx b1 b2 <<< $(tune2fs -l $loopdev | while read aline ;\
				do \
				    # If one we want, strip the text and all spaces, then echo it for consumption outside this subshell
				    [[ "$aline" =~ "Block count" ]] && (bc=${aline##Block count: } ; bc=${bc// } ; echo -n ",bc${bc}");\
					[[ "$aline" =~ "Block size" ]] && (bs=${aline##Block size: } ; bs=${bs// } ; echo -n ",bs${bs}");\
					done) ; rc=${PIPESTATUS[0]}
    [ $rc -ne 0 ] && errexit "? tune2fs failed with status $rc"
    # Set bc=block count, bs=blocksize. Handle both orderings: <nn>bc,<nn>bs or <nn>bs,<nn>bc
    [ "${b1#bc}" != "$b1" ] && bc=${b1#bc}
    [ "${b2#bs}" != "$b2" ] && bs=${b2#bs}
    [ "${b1#bs}" != "$b1" ] && bc=${b1#bs}  #In case in other order
    [ "${b2#bc}" != "$b2" ] && bs=${b2#bc}  #...
    [ "$bc" == "" -o "$bs" == "" ] && errexit "? tune2fs failed to read the file system"

    [ $plugindebug -eq 1 ] && logger "Check the file system"
    echo "> Check the file system"
    e2fsck -pf $loopdev
    rc=$?
    [ $rc -ge 4 ] && errexit "? e2fsck reports that file system is corrupt $rc"

    [ $plugindebug -eq 1 ] && logger "Get new partition size"
    oresize=$(resize2fs -P $loopdev)
    errifrc $? "? resize2fs problem"
    # Strip everything before ": " leaving only the new partition size, then up it a bit
    newsize=${oresize##*: }
    #newsize=$((newsize+8))
    newsize=$((newsize+(imgext/(bs/512))))

    if [ $plugindebug -eq 1 ]
    then
	echo "> Shrink data"
	echo "  Partition Start: $partstart"
	echo "  Partition End:   $partend"
	echo "  Partition Size:  $partsize"
	echo "  oresize: ${oresize##*: }"
	echo "  New size: $newsize"
	echo "  bc: $bc"
	echo "  bs: $bs"
	echo "  imgext: $imgext"
    fi

    [ $bc -le $newsize ] && errexit "% Image cannot be shrunk any further"

    # Shrink the file system
    [ $plugindebug -eq 1 ] && logger "Shrink the file system"
    echo "> Shrink the file system from $bc to $newsize ${bs}-byte blocks"
    resize2fs -M -p $loopdev $newsize
    errifrc $? "? resize2fs shrink exited with status"

    # have not made resizepart work yet, so do a rm/mkpart on the partition
    #partnewsize=$((newsize*bs))
    #partnewend=$((partstart+partnewsize-1))
    #partendblks=$(((partnewend-partstart)/512))
    #parttype="primary"
    #parted -ms $loopdev unit B print
    #echo "> Resize partition: $partnewsize"
    #parted -s $loopdev resizepart 1 $partnewsize
    #errifrc $? "? parted resize partition failed"

    # Shrink the partition by removing and recreating it
    [ $plugindebug -eq 1 ] && logger "Remove old partition"
    echo "> Remove old partition"
    parted -s -a minimal $dimg rm $partnum
    errifrc $? "? parted rm partition failed with status"

    [ $plugindebug -eq 1 ] && logger "Make new partition"
    echo "> Make new partition"
    partnewsize=$((newsize*bs))
    partnewend=$((partstart+partnewsize-1))
    parttype="primary"
    parted -s $dimg unit B mkpart $parttype $partstart $partnewend
    errifrc $? "? parted mkpart failed with status"
    #
    # Shrink the IMG
    #
    [ $plugindebug -eq 1 ] && logger "Shrink the IMG"
    endsize=$((partstart+partnewsize))
    echo "> Shrink the image by truncating to $endsize"
    truncate -s ${endsize%B} $dimg
    errifrc $? "? Truncate failed with status "
    echo "* Shrink complete"
    asize=$(stat --printf %s $dimg)
    echo "  IMG '$dimg' was $(getgbstr $bsize) now $(getgbstr $asize)"
    return
}

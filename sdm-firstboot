#!/bin/bash
#
# This script runs at first boot to perform desired configuration
#
# Processed at first boot: wifi-country, enable/disable service, custom scripts, and automatic reboot
#                          sdm --burn may write locale, keymap, and/or timezone into 1piboot.conf (NYI)
#                            if they are specified on the burn command line, so they will be processed as well
#                          ...plus a bunch of other infrequently used device settings
#
function write_console() {
    #
    # $1 string to write
    # Written to /dev/console as "\n$(thisdate) FirstBoot: $1"
    echo -e "\n$(thisdate) FirstBoot: $1" > /dev/console
}

function write_console0() {
    #
    # $1 string to write
    # Written to /dev/console as "$1"
    echo -e "$1" > /dev/console
}

function set_wifi_country () {
    do_raspiconfig do_wifi_country "$1"
}

function doscripts() {
    #
    # $1: wildcard file spec
    # $2: Scripts name
    #
    local fns="$1" sname="$2"
    for f in $fns
    do
	[ ! -e "$f" ] && continue        #Skip if file doesn't exist; probably no files in dir so get $fns back
	if [ -x $f ]
	then
	    bootlog "Run $sname Script '$f'"
	    bash $f
	else
	    bootlog "$sname Script '$f' does not have execute permission"
	fi
    done
}    

function doconfig() {
    cfgfile="$1"
    [ ! -f $cfgfile ] && bootlog "? Config file $cfgfile not found...skipping" && exit
    #write_console "Start Configuration with configuration file '$cfgfile'"
    bootlog "Start Configuration with configuration file '$cfgfile'"
    while IFS=":=" read rpifun value
    do
	if [[ ! $rpifun =~ ^\ *# && -n $rpifun ]] # skip comment and malformed lines
	then
	    value="${value%%\#*}"    # Del EOL comments
	    value=$(stripquotes $value)
	    doconfigitem $rpifun $value bootlog
	fi
    done < $cfgfile
    #write_console "Configuration with configuration file '$cfgfile' Completed"
    bootlog "Configuration with configuration file '$cfgfile' Completed"
}

timesyncwait() {
    #
    # Waits for time to be synced or 120 seconds
    #
    # Skip if --nowait-timesync
    #
    if [ $nowaittimesync -eq 1 ]
    then
	write_console "Skip wait for time synchronization per --nowait-timesync"
	bootlog "Skip wait for time synchronization per --nowait-timesync"
	return
    fi

    swait=120
    for (( secs=1 ; secs<=$swait ; secs++))
    do
	[ "$(timedatectl status | grep synchronized | (IFS=' ' ; read a b c d ; echo $d))" == "yes" ] && break
	if [ $secs -eq $swait ]
	then
	    write_console "System time not synchronized after $swait second wait; Proceeding..."
	    bootlog "System time not synchronized after $swait second wait; proceeding to regenerate SSH host keys"
	    return
	fi
	if [ $((secs%10)) -eq 0 ]
	then
	    write_console "Waiting $secs/$swait seconds for system time synchronization"
	    bootlog "Waiting $secs/$swait seconds for system time synchronization"
	fi
	sleep 1
    done
    bootlog "System time synchronization achieved"
    write_console "System time synchronization achieved"
    return
}

function wait_startup_complete {
    # $1 is the message to write
    local lc=0 msg=$1
    # Can't use this test VV because boot_behaviour might change it, so need to check both graphical.target and multi-user.target
    # while [ "$(systemctl show -p ActiveState $(systemctl get-default) --value)" != "active" ]
    while [ "$(systemctl show -p ActiveState graphical.target --value)" != "active" -a "$(systemctl show -p ActiveState multi-user.target --value)" != "active" ]
    do
	if [ $lc -eq 0 ]
	then
	   bootlog "$msg"
	   write_console "$msg"
	   lc=1
	fi
	[ $flashled -eq 0 ] && morseled "-..- -..-"
	sleep 1
    done
}

function do_delayed_boot_behavior {
    #
    # $1 = 'reboot' if system will be rebooted
    local now="" nowb=""
    [ "$1" != "reboot" ] && now="--now" && nowb="--no-block"
    IFS="=" read key value <<< $(grep delayed_boot_behavior /etc/sdm/auto-1piboot.conf)
    if [ "$value" != "" ]
    then
	if [[ "B3B4" =~ "$value" ]]
	then
	    # Re-enable display manager that we disabled in phase 1
	    if [ -d /etc/lightdm ]
	    then
		configitemlog "set boot behaviour to $value" bootlog
		do_raspiconfig do_boot_behaviour $value
		bootlog "Set systemd default to graphical.target"
		systemctl set-default graphical.target
		if [ "$1" != "reboot" ]
		then
		    bootlog "Start lightdm"
		    systemctl restart lightdm
		else
		    bootlog "Enable lightdm"
		    systemctl enable lightdm
		fi
	    else
		[ -d /etc/X11/xdm ] && bootlog "Re-enable xdm" && systemctl enable $now xdm > /dev/null 2>&1 && sleep 3
		[ -d /etc/X11/wdm ] && bootlog "Re-enable wdm" && systemctl enable $now wdm && sleep 3
		bootlog "Set systemd default to graphical.target"
		systemctl set-default graphical.target
	    fi
	else
	    if [[ "B2" =~ "$value" ]]
	    then
		configitemlog "set boot behaviour to $value" bootlog
		do_raspiconfig do_boot_behaviour $value
	    fi
	fi
    fi
    # Perform cleanup steps done by /usr/bin/cancel_rename
    bootlog "Re-enable getty@tty1"
    systemctl enable $now $nowb getty@tty1 > /dev/null 2>&1
    rm -f /etc/ssh/sshd_config.d/rename_user.conf
}

#
# Mainline
#
if [ "$1" == "" ]
then
    $0 "fork" &         # Fork and restart myself so forking service is started
    exit
fi
#
# Now running in the fork
#
declare -x SDMNSPAWN="FirstBoot"
source /etc/sdm/sdm-readparams

write_console "Start sdm FirstBoot Service"
bootlog "Start sdm FirstBoot Service"
[ $regensshkeys -eq 1 ] && touch /etc/ssh/sshd_not_to_be_run    #Don't let ssh service start before host keys generated

#
# Run any scripts that are must run ASAP (like network configuration)
#
if [ -d /etc/sdm/xpiboot ]
then
    chmod 755  /etc/sdm/xpiboot/0*-*.sh  #Ensure all executable
    doscripts "/etc/sdm/xpiboot/0*-*.sh" "Generated FirstBoot"
fi

[ -f /etc/sdm/auto-1piboot.conf ] && doconfig /etc/sdm/auto-1piboot.conf

#
# Set WiFi Country or load WiFi credentials
#
[[ "$loadlocal" =~ "flashled" ]] && flashled=1 || flashled=0
if [[ "$loadlocal" =~ "usb" ]]
then
    bootlog "?? Loadlocal USB NYI"
    #bootlog "Loading Local Settings and WiFi Credentials from a USB drive"
    #[[ "$loadlocal" =~ "internet" ]] && ckinternet=1 || ckinternet=0
    #loadusbcreds $flashled $ckinternet
else
    if [ "$wificountry" != "" ]
    then
	bootlog "Set WiFi Country to '$wificountry'"
	set_wifi_country "$wificountry"
    fi
    if [[ "$loadlocal" =~ "plugin" ]]  || [[ "$loadlocal" =~ "wifi" ]]
    then
	logit "> FirstBoot: Handling loadlocal"
	[ "$wificountry" == "" ] && set_wifi_country US 
	bootlog "Start Captive Portal to obtain WiFi SSID and Password"
	write_console "Start Captive Portal to obtain WiFi SSID and Password"
	write_console0 ""
	write_console0 "Watch the ACT light"
	write_console0 "   ----  Access Point not started"
	write_console0 "   -.--  Access Point started"
	write_console0 "   --.-  WiFi connection test in progress"
	write_console0 "   ....  Connection test results ready"
	write_console0 "   ...-  Restoring network configuration to exit"
	#write_console0 ""
	if [[ "$loadlocal" =~ "plugin" ]]
	then
	    if [ -f /etc/sdm/local-assets/plugin-wificonfig.sh ]
	    then
		logit "> FirstBoot: Run plugin-wificonfig.sh"
		/etc/sdm/local-assets/plugin-wificonfig.sh
		mv /etc/sdm/local-assets/plugin-wificonfig.sh /etc/sdm/local-assets/.sdm.done.plugin-wificonfig.sh
	    else
		logit "% FirstBoot: wificonfig plugin set but /etc/sdm/local-assets/plugin-wificonfig.sh not found"
	    fi
	    write_console "Captive Portal complete; Resume FirstBoot processing"
	fi
    fi
fi
[ -f /etc/sdm/local-1piboot.conf ] && bootlog "Run Localization Settings from Captive Portal in /etc/sdm/local-1piboot.conf" && doconfig /etc/sdm/local-1piboot.conf
#
# Wait for network online
#
timesyncwait
#
#  run scripts internally generated by sdm
#
chmod 755 /etc/sdm/0piboot/0*-*.sh   #Ensure all executable
doscripts "/etc/sdm/0piboot/0*-*.sh" "Generated FirstBoot"

#
# Only look at 1piboot.conf if there's anything to process
#
[ -f /etc/sdm/1piboot.conf ] && [ "$(grep -v -e '#' /etc/sdm/1piboot.conf | grep -v -e '^$' | wc -l)" != "0" ] && doconfig /etc/sdm/1piboot.conf

#
# Final FirstBoot time processing: custom scripts and reboot
#
[ "$bootscripts" == "1" ] && doscripts "$sdmdir/1piboot/0*-*.sh" "Custom FirstBoot" || bootlog "Skip Custom FirstBoot Scripts"

logit "> FirstBoot: Disable sdm-firstboot service"
systemctl disable sdm-firstboot > /dev/null 2>&1

if [ $regensshkeys -eq 1 ]
then
    write_console "Regenerate SSH Host Keys"
    bootlog "Regenerate SSH Host Keys"
    systemctl start regenerate_ssh_host_keys
    while [ "$(systemctl show -p ActiveState regenerate_ssh_host_keys --value)" == "active" ]
    do
	sleep 1
    done
fi
rm -f /etc/ssh/sshd_not_to_be_run

if [ $reboot -eq 1 -a $noreboot -ne 1 ]
then
    wait_startup_complete "System will restart automatically after system startup has completed"
    do_delayed_boot_behavior reboot
    write_console "System startup complete; System will restart in $rebootwait seconds"
    bootlog "System will restart in $rebootwait seconds"
    sleep $rebootwait
    systemctl daemon-reload
    write_console "System restarting now\n"
    bootlog "System restarting now"
    systemctl reboot
else
    [ "$(systemctl is-enabled ssh)" == "enabled" -a $reboot -ne 1 ] && systemctl start ssh
    wait_startup_complete "System will continue without restarting after system startup has completed"
    do_delayed_boot_behavior noreboot
    write_console "System startup complete"
    bootlog "System startup complete"
fi
exit 0


#!/bin/bash
#
# This script runs at first boot to perform desired configuration
#
# Processed at first boot: wifi-country, enable/disable service, custom scripts, and automatic reboot
#                          sdm --burn may write locale, keymap, and/or timezone into 1piboot.conf (NYI)
#                            if they are specified on the burn command line, so they will be processed as well
#                          ...plus a bunch of other infrequently used device settings
#
function write_console() {
    #
    # $1 string to write
    # Written to /dev/console as "\n$(thisdate) FirstBoot: $1"
    echo -e "\n$(thisdate) FirstBoot: $1" > /dev/console
}
function write_console0() {
    #
    # $1 string to write
    # Written to /dev/console as "$1"
    echo -e "$1" > /dev/console
}

function waitusb() {
    #
    # Waits forever until a USB device found
    # Returns the name of the USB device (/dev/sdX)
    #
    # Flashes the LED with UUU if we have to wait
    #
    local flashled=$1
    secs=0
    while [ 0 ]
    do
	for d in sda sdb sdc sdd
	do
	    sdx="/dev/$d"
	    if [ -b $sdx ]
	    then
		if [ "$(lsblk $sdx 2>/dev/null)" != "" ]
		then
		    if ! grep $sdx /proc/mounts > /dev/null 2>&1
		    then
			echo $sdx
			return
		    fi
		fi
	    fi
	done
	#
	# Wait for the USB device to be inserted but nudge every 10 iterations
	#
	if [ $((secs%10)) -eq 0 ]
	then
	    write_console "Waiting for USB Device with Local Settings File '$wifile'"
	    write_console0 "USB Device must have the file '$wifile' in the root directory of the first partition"
	    write_console0 "with at least 3 lines of text:"
	    write_console0 "country=<2-Letter WiFi Country Abbreviation>"
	    write_console0 "ssid=<your WiFi SSID>"
	    write_console0 "password=<your WiFi Password>"
	    write_console0 "\n...And optionally..."
	    write_console0 "keymap=<Keymap name>"
	    write_console0 "locale=<Locale name>"
	    write_console0 "timezone=<Timezone>"
	    write_console0 "NOTE: Do NOT include the angle brackets"
	fi
	[ $flashled -eq 1 ] && morseled "..- ..- ..-" #UUU
	secs=$((secs+1))
	sleep 1
    done
}
function updreinsmsg() {
    write_console0 "** Update the USB drive as needed and reinsert"
    write_console0 "** Waiting..." 
}

function readusbcreds() {
    #
    # Find the credentials
    # NOTE: Doesn't handle # character in password. What about others?
    #
    local tmpf=$(mktemp -q /tmp/getcred.XXXX)
    if [ ! -f /mnt/$wifile ]
    then
	logger "? FirstBoot: Local Settings File '$wifile' Not Found on USB $sdx"
	write_console "Local Settings File '$wifile' Not Found on USB device $sdx"
	updreinsmsg
	echo "0"
	return
    fi
    uwificountry="" ; ussid="" ; upassword="" ; ukeymap="" ; ulocale="" ; utimezone="" ; udhcpwait=""
    tr -d '\r' < /mnt/$wifile > $tmpf # Eliminate Windows line endings if present
    while IFS=":=" read key value
    do
	if [[ ! $key =~ ^\ *# && -n $key ]] # skip comment and malformed lines
	then
            value="${value%%\#*}"    # Del EOL comments
            value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
            value="${value#\"}"     # Del opening double-quotes 
            value="${value%\"}"     # Del closing double-quotes 
            value="${value#\'}"     # Del opening single-quotes 
            value="${value%\'}"     # Del closing single-quotes 
	    case "${key,,}" in
		country)  uwificountry="${value^^}" ;;
		ssid)     ussid="$value"            ;;
		password) upassword="$value"        ;;
		keymap)   ukeymap="$value"          ;;
		timezone) utimezone="$value"        ;;
		locale)   ulocale="$value"          ;;
		dhcpwait) udhcpwait="$value"        ;;
	    esac
	fi
    done < $tmpf
    rm -f $tmpf
    rs=1          # Assume success
    write_console "Local Settings Read from USB ${sdx}:"
    write_console0 "country=$uwificountry"
    write_console0 "ssid=$ussid"
    write_console0 "psk=$upassword"
    bootlog "Found WiFi Country setting '$uwificountry' from USB Drive"
    bootlog "Found WiFi SSID setting '$ussid' from USB Drive"
    bootlog "Found WiFi Password setting '$upassword' from USB Drive"
    [ "$ukeymap" != "" ] && write_console0 "keymap=$ukeymap" && bootlog "Found Keymap '$ukeymap' from USB Drive"
    [ "$ulocale" != "" ] && write_console0 "locale=$ulocale" && bootlog "Found Locale '$ulocale' from USB Drive"
    [ "$utimezone" != "" ] && write_console0 "timezone=$utimezone" && bootlog "Found Timezone '$utimezone' from USB Drive"
    [ "$udhcpwait" != "" ] && write_console0 "dhcpwait=$udhcpwait" && bootlog "Found DHCPwait '$udhcpwait' from USB Drive"
    [ "$ussid" == "" -o "$upassword" == "" ] && write_console0 "? Incomplete WiFi configuration settings: WiFi SSID or Password" && rs=0
    ! (ckwificountry $uwificountry)  && write_console0 "\n? Unrecognized WiFi Country '$uwificountry'" && bootlog "? Unrecognized WiFi Country '$uwificountry'" && rs=0
    ! ckkeymap $ukeymap && write_console0 "\n? Unrecognized keymap '$ukeymap'"&& bootlog "? Unrecognized Keymap '$ukeymap'" && rs=0
    ! cklocale $ulocale && write_console0 "? Unrecognized locale '$ulocale'" && bootlog "? Unrecognized Locale '$ulocale'" && rs=0
    ! cktimezone $utimezone && write_console0 "? Unrecognized Timezone '$utimezone'" && bootlog "? Unrecognized Timezone '$utimezone'" && rs=0
    if [ $rs -eq 1 ]
    then
	[ "$ukeymap" != "" ]   && echo "keymap=$ukeymap" >> /etc/sdm/local-1piboot.conf
	[ "$ulocale" != "" ]   && echo "locale=$ulocale" >> /etc/sdm/local-1piboot.conf
	[ "$utimezone" != "" ] && echo "timezone=$utimezone" >> /etc/sdm/local-1piboot.conf
    else
	updreinsmsg
    fi
    echo "$rs:$uwificountry:$ussid:$upassword:$udhcpwait"
    return
}

function loadusbcreds() {

    local flashled=$1 ckinternet=$2
    wifile="local-settings.txt"
    while [ 0 ]
    do
	while [ 0 ]
	do
	    sdx=$(waitusb $flashled)
	    mount ${sdx}1 /mnt
	    IFS=":" read cresult uwificountry ussid upassword udhcpwait <<< $(readusbcreds)
	    umount /mnt
	    [ "$cresult" == "1" ] && break
	    [ $flashled -eq 1 ] && morseled "... --- ..." #SOS
	    sleep 10
	done
	[ "$udhcpwait" != "" ] && dhcpwait=$udhcpwait || dhcpwait=15
	[ $dhcpwait -eq 0 ] && dhcpwait=15            #Make sure that it's not 0!
	bootlog "Set WiFi Country to '$uwificountry'"
	#SUDO_USER=${myuser:-pi} raspi-config do_wifi_country "$uwificountry" nonint
	do_raspiconfig do_wifi_country "$uwificountry"
	wpa="/etc/wpa_supplicant/wpa_supplicant.conf"
#	systemctl stop wpa_supplicant > /dev/null 2>&1 # This isn't even used with dhcpcd and is disabled in sdm-phase1
	systemctl stop dhcpcd > /dev/null 2>&1
	sleep 5         # Don't want wpa to stomp on my nice new config file
	bootlog "Set WiFi Credentials in $wpa"
	[ -f $wpa ] && mv $wpa ${wpa}.original
	cat > $wpa <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
country=$uwificountry

network={
        ssid="$ussid"
        psk="$upassword"
        key_mgmt=WPA-PSK
}
EOF
	write_console "WiFi Credentials Set in $wpa"
	systemctl start dhcpcd > /dev/null 2>&1
	bootlog "Wait up to $dhcpwait seconds for dhcpcd to get an IP Address"
	write_console "Wait up to $dhcpwait seconds for dhcpcd to get an IP Address"
	for (( secs=0 ; secs < $dhcpwait ; secs++ ))
	do
	    myipaddr=$(awk '{print $4}' <<< $(ip -o -f inet addr show wlan0) | (IFS='/'; read a b; echo $a))
	    [[ ! "$myipaddr" =~ "169.254." ]] && [ "$myipaddr" != "" ] && break
	    [ $flashled -eq 1 ] && morseled "..-. ..-. ..-." #Waiting on IP Address
	    sleep 1
	done
	myipaddr=$(awk '{print $4}' <<< $(ip -o -f inet addr show wlan0) | (IFS='/'; read a b; echo $a))
	if [[ "$myipaddr" =~ "169.254." ]] || [ "$myipaddr" == "" ]
	then
	    bootlog "WiFi did not connect"
	    write_console "WiFi did not connect; Check WiFi settings and try again"
	    [ $flashled -eq 1 ] && morseled "-- -- -- --" #MMM
	    sleep 5
	else
	    bootlog "WiFi connected; IP Address $myipaddr" 
	    write_console "WiFi connected; IP Address $myipaddr"
	    [ $flashled -eq 1 ] && morseled "..... ..... ....." #Success for an internal address!
	    if [ $ckinternet -eq 1 ]
	    then
		if iponline 1.1.1.1
		then
		    bootlog "Internet IS accessible"
		    write_console "Internet IS accessible"
		    [ $flashled -eq 1 ] && morseled ".-.-.- .-.-.- .-.-.- .-.-.-"
		    break 2
		else
		    bootlog "Internet is NOT accessible"
		    write_console "Internet is NOT accessible" 
		    updreinsmsg
		    [ $flashled -eq 1 ] && morseled "-.-.-. -.-.-. -.-.-. -.-.-."
		fi
	    else
		break 2
	    fi
	fi
    done
return
}
# Flash LEDS on:
# UUU No USB device UUU
# SOS Error in local-settings.txt
# -- -- -- WiFi did not get an address
# ..... ..... .....  WiFi got IP address
# .-.-.- .-.-.-  Internet is accessible
# -.-.-. -.-.-.  No Internet connectivity
# ..-. ..-. ..-. Waiting on DHCP address

function set_wifi_country () {
    #	SUDO_USER=${myuser:-pi} raspi-config do_wifi_country "$1" nonint
    # This seems to be all that's necessary from do_wifi_country
    rfkill unblock wifi
    for fn in /var/lib/systemd/rfkill/*:wlan
    do
        echo "0" > "$fn"
    done
}

function doscripts() {
    #
    # $1: wildcard file spec
    # $2: Scripts name
    #
    local fns="$1" sname="$2"
    for f in $fns
    do
	[ ! -e "$f" ] && continue        #Skip if file doesn't exist; probably no files in dir so get $fns back
	if [ -x $f ]
	then
	    bootlog "Run $sname Script '$f'"
	    bash $f
	else
	    bootlog "$sname Script '$f' does not have execute permission"
	fi
    done
}    
function doconfig() {
    cfgfile="$1"
    [ ! -f $cfgfile ] && bootlog "? Config file $cfgfile not found...skipping" && exit
    bootlog "Start Configuration with configuration file '$cfgfile'"
    while IFS=":=" read rpifun value
    do
	if [[ ! $rpifun =~ ^\ *# && -n $rpifun ]] # skip comment and malformed lines
	then
	    value="${value%%\#*}"    # Del EOL comments
	    value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    value="${value#\"}"     # Del opening double-quotes 
	    value="${value%\"}"     # Del closing double-quotes 
	    value="${value#\'}"     # Del opening single-quotes 
	    value="${value%\'}"     # Del closing single-quotes 
	    doconfigitem $rpifun $value bootlog
	fi
    done < $cfgfile
    bootlog "Configuration with configuration file '$cfgfile' Completed"
}

timesyncwait() {
    #
    # Waits for time to be synced or 60 seconds
    #
    # Skip if --nowait-timesync
    #
    if [ $nowaittimesync -eq 1 ]
    then
	write_console "Skip wait for time synchronization per --nowait-timesync"
	bootlog "Skip wait for time synchronization per --nowait-timesync"
	return
    fi

    for (( secs=1 ; secs<=60 ; secs++))
    do
	[ "$(timedatectl status | grep synchronized | (IFS=' ' ; read a b c d ; echo $d))" == "yes" ] && break
	if [ $secs -eq 60 ]
	then
	    write_console "System time not synchronized after 60 second wait; Proceeding..."
	    bootlog "System time not synchronized after 60 second wait; proceeding to regenerate SSH host keys"
	    return
	fi
	if [ $((secs%10)) -eq 0 ]
	then
	    write_console "Waiting $secs/60 seconds for system time synchronization"
	    bootlog "Waiting $secs/60 seconds for system time synchronization"
	fi
	sleep 1
    done
    bootlog "System time synchronization achieved"
    write_console "System time synchronization achieved"
    return
}

function wait_startup_complete {
    # $1 is the message to write
    local lc=0 msg=$1
    # Can't use this test VV because boot_behaviour might change it, so need to check both graphical.target and multi-user.target
    # while [ "$(systemctl show -p ActiveState $(systemctl get-default) --value)" != "active" ]
    while [ "$(systemctl show -p ActiveState graphical.target --value)" != "active" -a "$(systemctl show -p ActiveState multi-user.target --value)" != "active" ]
    do
	if [ $lc -eq 0 ]
	then
	   bootlog "$msg"
	   write_console "$msg"
	   lc=1
	fi
	[ $flashled -eq 0 ] && morseled "-..- -..-"
	sleep 1
    done
}

function do_delayed_boot_behavior {
    #
    # $1 = 'reboot' if system will be rebooted
    local now="" nowb=""
    [ "$1" != "reboot" ] && now="--now" && nowb="--no-block"
    IFS="=" read key value <<< $(grep delayed_boot_behavior /etc/sdm/auto-1piboot.conf)
    if [ "$value" != "" ]
    then
	if [[ "B3B4" =~ "$value" ]]
	then
	    # Re-enable display manager that we disabled in phase 1
	    if [ -d /etc/lightdm ]
	    then
		configitemlog "set boot behaviour to $value" bootlog
		do_raspiconfig do_boot_behaviour $value
		if [ "$1" != "reboot" ]
		then
		    bootlog "Start lightdm"
		    systemctl restart lightdm
		else
		    bootlog "Enable lightdm"
		    systemctl enable lightdm
		fi
		#sleep 3
	    else
		[ -d /etc/X11/xdm ] && bootlog "Re-enable xdm" && systemctl enable $now xdm > /dev/null 2>&1 && sleep 3
		[ -d /etc/X11/wdm ] && bootlog "Re-enable wdm" && systemctl enable $now wdm && sleep 3
		bootlog "Set systemd default to graphical.target"
		systemctl set-default graphical.target
	    fi
	fi
    fi
    # Perform cleanup steps done by /usr/bin/cancel_rename
    bootlog "Re-enable getty@tty1"
    systemctl enable $now $nowb getty@tty1 > /dev/null 2>&1
    rm -f /etc/ssh/sshd_config.d/rename_user.conf
}

#
# Mainline
#
if [ "$1" == "" ]
then
    $0 "fork" &         # Fork and restart myself so forking service is started
    exit
fi
#
# Now running in the fork
#
declare -x SDMNSPAWN="FirstBoot"
source /etc/sdm/sdm-readparams

[ -f /etc/sdm/auto-1piboot.conf ] && doconfig /etc/sdm/auto-1piboot.conf
#
# Set WiFi Country or load WiFi credentials
#
[[ "$loadlocal" =~ "|flashled|" ]] && flashled=1 || flashled=0
if [[ "$loadlocal" =~ "|usb|" ]]
then
    bootlog "Loading Local Settings and WiFi Credentials from a USB drive"
    [[ "$loadlocal" =~ "|internet|" ]] && ckinternet=1 || ckinternet=0
    loadusbcreds $flashled $ckinternet
else
    if [ "$wificountry" != "" ]
    then
	bootlog "Set WiFi Country to '$wificountry'"
	set_wifi_country "$wificountry"
    fi
    if [[ "$loadlocal" =~ "|wifi|" ]]
    then
	[ "$wificountry" == "" ] && set_wifi_country US 
	bootlog "Start Captive Portal to obtain WiFi SSID and Password"
	write_console "Start Captive Portal to obtain WiFi SSID and Password"
	write_console0 "Watch the ACT light"
	write_console0 "   ----  Access Point not started"
	write_console0 "   -.--  Access Point started"
	write_console0 "   --.-  WiFi connection test in progress"
	write_console0 "   ....  Connection test results ready"
	write_console0 "   ...-  Restoring network configuration to exit"
	write_console0 ""
	$sdmdir/sdm-cportal --sdm --apip $apip --apssid $apssid
	write_console "Captive Portal complete; Resume FirstBoot processing"
    fi
fi
[ -f /etc/sdm/local-1piboot.conf ] && bootlog "Run Local Settings from --loadlocal in /etc/sdm/local-1piboot.conf" && doconfig /etc/sdm/local-1piboot.conf

#
# Only look at 1piboot.conf if there's anything to process
#
[ -f /etc/sdm/1piboot.conf ] && [ "$(grep -v -e '#' /etc/sdm/1piboot.conf | grep -v -e '^$' | wc -l)" != "0" ] && doconfig /etc/sdm/1piboot.conf

#
# Wait for network online and then run scripts internally generated by sdm
#
timesyncwait
doscripts "/etc/sdm/0piboot/0*-*.sh" "Generated FirstBoot"

#
# Final FirstBoot time processing: custom scripts and reboot
#
[ "$bootscripts" == "1" ] && doscripts "$sdmdir/1piboot/0*-*.sh" "Custom FirstBoot" || bootlog "Skip Custom FirstBoot Scripts"

logit "> FirstBoot Disable sdm-firstboot service"
systemctl disable sdm-firstboot > /dev/null 2>&1

if [ $regensshkeys -eq 1 ]
then
    bootlog "Regenerate SSH Host Keys"
    systemctl start regenerate_ssh_host_keys
    while [ "$(systemctl show -p ActiveState regenerate_ssh_host_keys --value)" == "active" ]
    do
	sleep 1
    done
fi

if [ $reboot -eq 1 -a $noreboot -ne 1 ]
then
    wait_startup_complete "System will restart automatically after system startup has completed"
    do_delayed_boot_behavior reboot
    write_console "System startup complete; Restarting the system in $rebootwait seconds\n"
    bootlog "Restarting the system in $rebootwait seconds"
    sleep $rebootwait
    systemctl daemon-reload
    write_console "Restarting the system now\n" 
    bootlog "Restarting the system now"
    systemctl reboot
else
    wait_startup_complete "System will continue without restarting after system startup has completed"
    do_delayed_boot_behavior noreboot
    write_console "System startup complete"
    bootlog "System startup complete"
fi
exit 0


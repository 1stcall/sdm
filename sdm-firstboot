#!/bin/bash
#
# This script runs at first boot to perform desired configuration
#
# Processed at first boot: wifi-country, enable/disable service, custom scripts, and automatic reboot
#                          sdm --burn may write locale, keymap, and/or timezone into 1piboot.conf (NYI)
#                            if they are specified on the burn command line, so they will be processed as well
#                          ...plus a bunch of other infrequently used device settings
#

function doscripts() {
    #
    # $1: wildcard file spec
    # $2: Scripts name
    #
    local fns="$1" sname="$2"
    for f in $fns
    do
	[ ! -e "$f" ] && continue        #Skip if file doesn't exist; probably no files in dir so get $fns back
	if [ -x $f ]
	then
	    bootlog "Run $sname Script '$f'"
	    bash $f
	else
	    bootlog "$sname Script '$f' does not have execute permission"
	fi
    done
}    
function doconfig() {
    cfgfile="$1"
    [ ! -f $cfgfile ] && bootlog "? Config file $cfgfile not found...skipping" && exit
    bootlog "Start Configuration with configuration file '$cfgfile'"
    IFS=":="
    while read rpifun value
    do
	if [[ ! $rpifun =~ ^\ *# && -n $rpifun ]] # skip comment and malformed lines
	then
	    value="${value%%\#*}"    # Del EOL comments
	    value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    value="${value%\"}"     # Del opening double-quotes 
	    value="${value#\"}"     # Del closing double-quotes 
	    value="${value%\'}"     # Del opening single-quotes 
	    value="${value#\'}"     # Del closing single-quotes 
	    case "$rpifun" in
		# * do_resolution still needs to be sorted out
		serial)
		    bootlog "Set Serial Port to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_serial $value nonint
		    ;;
		service-enable)
		    bootlog "Enable Service '$value'"
		    systemctl enable $value
		    ;;
		service-disable)
		    bootlog "Disable Service '$value'"
		    systemctl disable $value
		    ;;
		boot_behavior|boot_behaviour)  # Allow US spelling as well ;)
		    bootlog "set boot_behaviour to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_boot_behaviour $value nonint
		    ;;
		audio|pi4video|boot_splash|boot_order|\
		    spi|i2c|boot_wait|net_names|overscan|blanking|\
		    pixdub|overclock|rgpio|camera|onewire)
		    # These are simple on/off and less commonly used so no elaborate logging for them
		    bootlog "Set $rpifun to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_$rpifun $value nonint
		    ;;
		#
		# fstab, keymap, locale, and timezone may be set via sdm --burn command
		#
		fstab)
		    bootlog "Append fstab extension '$value' to /etc/fstab"
		    cat /etc/sdm/assets/$value >> /etc/fstab
		    ;;
		keymap)
		    bootlog "Set Keymap to '$value' (!Ignore invoke-rc.d messages)"
		    SUDO_USER=${myuser:-pi} raspi-config do_configure_keyboard "$value" nonint
		    ;;
		locale)
		    bootlog "Set Locale to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_change_locale "$value" nonint
		    declare -x LANG="$value"
		    ;;
		timezone)
		    bootlog "Set Timezone to '$value'"
		    SUDO_USER=${myuser:-pi} raspi-config do_change_timezone "$value" nonint
		    ;;
		*)
		    bootlog "% Unrecognized option '$rpifun' in '$cfgfile'"
		    ;;
	    esac
	fi
    done < $cfgfile
    bootlog "Configuration with configuration file '$cfgfile' Completed"
}
#
# Mainline
#
if [ "$1" == "" ]
then
    /usr/local/sdm/sdm-firstboot "fork" &  # Fork and restart myself so forking service is started
    exit
fi
#
# Now running in the fork
#
source /usr/local/sdm/sdm-cparse ; readparams ""
[ -f /etc/sdm/auto-1piboot.conf ] && doconfig /etc/sdm/auto-1piboot.conf
#
# Set WiFi Country or load WiFi credentials
#
if [ "$loadlocal" == "USB" ]
then
    bootlog "Loading Local Settings and WiFi Credentials from a USB drive"
    loadusbcreds
    [ -f /etc/sdm/local-1piboot.conf ] && bootlog "Run Local Settings from --loadlocal in /etc/sdm/local-1piboot.conf" && doconfig /etc/sdm/local-1piboot.conf
else
    if [ "$wificountry" != "" ]
    then
	bootlog "Set WiFi Country to '$wificountry'"
	SUDO_USER=${myuser:-pi} raspi-config do_wifi_country "$wificountry" nonint
    fi
fi
#
# Only look at 1piboot.conf if there's anything to process
#
[ -f /etc/sdm/1piboot.conf ] && [ "$(grep -v -e '#' /etc/sdm/1piboot.conf | grep -v -e '^$' | wc -l)" != "0" ] && doconfig /etc/sdm/1piboot.conf
#
# Always run scripts internally generated by sdm (none yet) or Custom Phase Scripts
#
doscripts "/etc/sdm/0piboot/0*-*.sh" "Generated FirstBoot"
#
# Final FirstBoot time processing: custom scripts and reboot
#
[ "$bootscripts" == "1" ] && doscripts "/usr/local/sdm/1piboot/0*-*.sh" "Custom FirstBoot" || bootlog "Skip Custom FirstBoot Scripts"

if [ $reboot -eq 1 ]
then
    logit "" "> FirstBoot Disable sdm-firstboot service"
    systemctl disable sdm-firstboot > /dev/null 2>&1
    bootlog "System will restart automatically after system startup has completed"
    echo "$(thisdate) FirstBoot: System will restart automatically after system startup completes" > /dev/console
    # Can't use this test VV because boot_behaviour might change it, so need to check both graphical.target and multi-user.target
    # while [ "$(systemctl show -p ActiveState $(systemctl get-default) --value)" != "active" ]
    while [ "$(systemctl show -p ActiveState graphical.target --value)" != "active" -a "$(systemctl show -p ActiveState multi-user.target --value)" != "active" ]
    do
	sleep 1
    done
    echo -e "\n$(thisdate) FirstBoot: Restarting the system in $rebootwait seconds\n" > /dev/console
    bootlog "Restarting the system in $rebootwait seconds"
    sleep $rebootwait
    systemctl daemon-reload
    echo -e "\n$(thisdate) FirstBoot: Restarting the system\n" > /dev/console
    bootlog "Restarting the system"
    systemctl reboot
fi

#!/bin/bash
#
# This is an sdm plugin for: network
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

function getdefnm() {
    #
    # $1 has user-provided $netman
    #
    local dfn="$1"
    if [ "$dfn" != "" ]
    then
	[ "$dfn" == "nm" ] && dfn="network-manager"
	echo "$dfn"
    else
	[ ${raspiosver} -ge 12 ] && echo "network-manager" || echo "dhcpcd"
    fi
}

function cfgdhcpcdwifi() {
    #
    # call this after any wpa has been copied into $assetdir
    # Does checks required for dhcpcd (only)
    #
    if [ "$wpa" != "" ]
    then
	if [ -f $assetdir/wpa.conf ]
	then
            IFS="=" read a wificountry <<< $(grep 'country=' $assetdir/wpa.conf | head -n 1)
	else
	    logtoboth "? Plugin $pfx: Cannot find $assetdir/wpa.conf"
	    exit 1
	fi
    else
	if [ "$wifissid" != "" -a "$wifipassword" != "" -a "$wificountry" != "" ]
	then
	    logtoboth "> Plugin $pfx: Create $assetdir/wpa.conf"
	    logtoboth "  with SSID: $wifissid Password: $wifipassword WiFi Country: $wificountry"
	    cat > $assetdir/wpa.conf <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
country=$wificountry
update_config=1
ap_scan=1

network={
    priority=10
    ssid="$wifissid"
    psk="$wifipassword"
}
EOF
	    logtoboth "> Plugin $pfx: Set WiFi Country '$wificountry' for sdm FirstBoot"
	    writeconfig    # Update config to save updated wificountry
	else
	    if [ "$nowifi" != "y" ]
	    then
		logtoboth "% Plugin $pfx: Some WiFi settings not configured or no wpa: wifissid wifipassword wificountry"
		logtoboth "  If you did not configure WiFi another way the WiFi network will not connect"
	    fi
	fi
    fi
}

function getwififromwpa() {
    if [ -f $assetdir/wpa.conf ]
    then
	[ "$wifissid" == "" ] && IFS="=" read a wifissid <<< $(grep 'ssid=' $assetdir/wpa.conf | head -n 1)
	wifissid=$(stripquotes "$wifissid" qq)
	[ "$wifipassword" == "" ] && IFS="=" read a wifipassword <<< $(grep 'psk=' $assetdir/wpa.conf | head -n 1)
	wifipassword=$(stripquotes "$wifipassword" qq)
	[ "$wificountry" == "" ] && IFS="=" read a wificountry <<< $(grep 'country=' $assetdir/wpa.conf | head -n 1)
    fi
}

function modnmconn() {
    cattr="$1" cname="$2" fname="$3"
    if [ $newnm -eq 1 ]
    then
	[ "$fname" != "" ] && fname="$(basename "$fname")" || fname="$cname"
	fname="${fname%.nmconnection}"
	nmcli --offline c modify $cattr </etc/NetworkManager/system-connections/$fname.nmconnection | tee /tmp/$fname.nmconnection >/dev/null
	rm -f /etc/NetworkManager/system-connections/$fname.nmconnection
	mv /tmp/$fname.nmconnection /etc/NetworkManager/system-connections/$fname.nmconnection
    else
	echo "nmcli c modify $cname $cattr" >> $nmdcfg
    fi
}

function converty() {
    [ -v noipv6 ] && noipv6=y
    [ -v nowifi ] && nowifi=y
    [ -v zeroconf ] && zeroconf=y
}

function network_dossh() {
    dosshsetup service network
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
loadparams
assetdir="$SDMPT/etc/sdm/assets/network"

vldargs="|netman|dhcpcdwait|dhcpcdappend|ssh|wpa|wifissid|wifipassword|powersave|wificountry|ifname|noipv6|nmconf|nmconn|nowifi|zeroconf|"
rqdargs=""

if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    #logtoboth "* Plugin $pfx: Start Phase 0"

    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    converty
    mkdir -p $assetdir
    netman=$(getdefnm "$netman")
    logtoboth "> Plugin $pfx: Configuring '$netman' for network configuration management"

    if [ "$wpa" != "" ]
    then
	if [ -f $wpa ]
	then
	    logtoboth "> Plugin $pfx: Copy wpa_supplicant config file '$wpa' to $assetdir/wpa.conf"
	    tr -d '\r' < $wpa > $assetdir/wpa.conf
	else
	    logtoboth "? Plugin $pfx: wpa file '$wpa' not found"
	    exit 1
	fi
    fi
    case "${netman}" in
	dhcpcd)
	    if [ "$dhcpcdappend" != "" ]
	    then
		if [ -f $dhcpcdappend ]
		then
		    logtoboth "> Plugin $pfx: Copy dhcpcdappend file '$dhcpcdappend' to $assetdir/dhcpcd-append.conf"
		    cp -a $dhcpcdappend $assetdir/dhcpcd-append.conf
		else
		    logtoboth "? Plugin $pfx: dhcpcdappend file '$dhcpcdappend' not found"
		    exit 1
		fi
	    fi
	    cfgdhcpcdwifi
	    ;;
	nm|network-manager)
	    #
	    # Copy nmconf and nmconn files into IMG
	    #
	    for conf in nmconf nmconn
	    do
		if [ "${!conf}" != "" ]
		then
		    IFS="," read -a citems <<< "${!conf}"
		    for c in "${citems[@]}"
		    do
			if [ -f $c ]
			then
			    mkdir -p $assetdir/$conf
			    logtoboth "> Plugin $pfx: Copy $conf '$c' to $assetdir/$conf"
			    cp -a $c $assetdir/$conf
			else
			    logtoboth "% Plugin $pfx: $conf file '$c' not found"
			    exit 1
			fi
		    done
		fi
	    done
	    #
	    # Check for WiFi defined somehow and report if it appears to not be defined
	    #
	    nmwifi=0
	    if [ -d $assetdir/nmconn ]
	    then
		# Did any of the nm connection definitions define a wifi connection?
		grep -qs type=wifi $assetdir/nmconn/* >/dev/null && nmwifi=1
	    fi
	    [ "$wificountry" == "" -o "$wifissid" == "" -o "$wifipassword" == "" ] && getwififromwpa
	    if [ "$wificountry" == "" -o "$wifissid" == "" -o "$wifipassword" == "" ]
	    then
		# If still don't have wifi config and no wifi .nmconnections and not 'nowifi', inform wifi issue
		if [ "$nowifi" != "y" -a $nmwifi -eq 0 ]
		then
		    logtoboth "% Plugin $pfx: Network Manager requires either a .nmconnection file for WiFi"
		    logtoboth "  or explicit WiFi configuration via arguments: wifissid wifipassword wificountry"
		    logtoboth "  Found neither; WiFi likely will not connect"
		fi
	    fi
	    ;;
    esac
    
    #logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    netman=$(getdefnm "$netman")
    #logfreespace "at start of Plugin $pfx Phase 1"

    #logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
elif [ "$phase" == "post-install" ]
then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    xwificountry="$wificountry"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    converty
    netman=$(getdefnm "$netman")
    plugin_printkeys
    # If no wificountry in plugin args, use previous setting
    if [ "$wificountry" == "" ]
    then
	wificountry="$xwificountry"
    else
	logtoboth "> Plugin $pfx: Set WiFi Country '$wificountry' for sdm FirstBoot"
	writeconfig  # Update config to save updated wificountry
    fi
    #logfreespace "at start of Plugin $pfx Phase post-install"
    #
    # Set up ssh
    # If ssh not specifed, default to enabled
    #
    [ ! -v ssh -o "$ssh" == "" ] && ssh="service"
    dosshsetup "$ssh" network

    if [ -f $assetdir/wpa.conf ]
    then
	logtoboth "> Plugin $pfx: Copy $assetdir/wpa.conf to /etc/wpa_supplicant/wpa-supplicant.conf"
	cp -a $assetdir/wpa.conf /etc/wpa_supplicant/wpa_supplicant.conf
	setfileownmode /etc/wpa_supplicant/wpa_supplicant.conf 644
    fi
    case "${netman}" in
	dhcpcd)
	    [ "$raspiosver" -ge 12 ] && pkg="dhcpcd" || pkg="dhcpcd5"
	    if ! ispkginstalled $pkg
	    then
		logtoboth "> Plugin $pfx: Install $pkg"
		doaptrpterror "install --no-install-recommends --yes $pkg" $showapt
	    fi
	    systemctl disable NetworkManager >/dev/null 2>&1
	    if [ -f $assetdir/dhcpcd-append.conf ]
	    then
		logtoboth "> Plugin $pfx: Append $assetdir/dhcpcd-append.conf to /etc/dhcpcd.conf"
		cat $assetdir/dhcpcd-append.conf >> /etc/dhcpcd.conf
		[ "$noipv6" == "y" ] && echo "noipv6" >> /etc/dhcpcd.conf
	    fi
	    #
	    # Set dhcpcd wait if requested
	    #
	    if [ -v dhcpcdwait ]
	    then
		mkdir -p /etc/systemd/system/dhcpcd.service.d/
		# use the same /path/to/dhcpcd that the dhcpcd service is
		dex=$(grep -E "ExecStart=.*/dhcpcd" /lib/systemd/system/dhcpcd.service| head -n 1 -)
		dhcf=${dex##ExecStart=}  #Strip leading ExecStart=
		dhcf=${dhcf%% *}         #Strip everything after the path (switches,etc)
		logtoboth "> Plugin $pfx: Enable dhcpcd [$dhcf] 'wait for network connection'"
		cat > /etc/systemd/system/dhcpcd.service.d/wait.conf << EOF
[Service]
ExecStart=
ExecStart=$dhcf -q -w
EOF
	    fi
	    #
	    # Fix dhcpcd hooks if needed
	    #
	    if [ ! -f /lib/dhcpcd/dhcpcd-hooks/10-wpa_supplicant ]
	    then
		if [ -f /usr/share/dhcpcd/hooks/10-wpa_supplicant ]
		then
		    logtoboth "> Plugin $pfx: Copy /usr/share/dhcpcd/hooks/10-wpa_supplicant to /lib/dhcpcd/dhcpcd-hooks (BUG)"
		    cp -a /usr/share/dhcpcd/hooks/10-wpa_supplicant /lib/dhcpcd/dhcpcd-hooks
		else
		    logtoboth "% Plugin $pfx: /lib/dhcpcd/dhcp-hooks/10-wpa_supplicant not found. WiFi will not work"
		fi
	    fi
	    ;;

	nm|network-manager)
	    [ "$ifname" == "" ] && ifname="eth0"
	    if ! ispkginstalled network-manager
	    then
		logtoboth "> Plugin $pfx: Install Network Manager"
		doaptrpterror "install --no-install-recommends --yes network-manager" $showapt
	    fi
	    systemctl -q enable NetworkManager >/dev/null 2>&1
	    systemctl -q disable dhcpcd >/dev/null 2>&1
	    for conf in nmconf nmconn
	    do
		if compgen -G "$assetdir/$conf/*" >/dev/null
		then
		    [ "$conf" == "nmconf" ] && tgt="conf.d" || tgt="system-connections"
		    for c in $assetdir/$conf/*
		    do
			cbn=$(basename $c)
			logtoboth "> Plugin $pfx: Copy $conf '$cbn' from $assetdir/$conf to /etc/NetworkManager/$tgt"
			cp -a $c /etc/NetworkManager/$tgt
		    done
		fi
	    done
	    # Defer configuration to FirstBoot if running old NetworkManager (version older than bookworm)
	    nmver=$(nmcli --version 2>/dev/null)
	    nmver=${nmver##*version}
	    [[ "$nmver" =~ ([[:digit:]]{,2}).([[:digit:]]{,2}).([[:digit:]]{,2}) ]]
	    nmvermaj="${BASH_REMATCH[2]}"
	    nmvermin="${BASH_REMATCH[3]}"
	    [ "$nmvermaj" == "" ] && nmvermaj="1"
	    [ "$nmvermin" == "" ] && nmvermin="41"
	    [[ $nmvermaj -gt 1 ]] || [[ $nmvermin -ge 42 ]] && newnm=1 || newnm=0
	    nmdcfg="/etc/sdm/xpiboot/005-nm-config.sh"  # Want it to run early in FirstBoot if newnm=0
	    [ $newnm -eq 0 ] && echo "#!/bin/bash" > $nmdcfg
	    if ! compgen -G "/etc/NetworkManager/system-connections/*.nmconnection" >/dev/null && ! grep -qs interface-name=wlan0 /etc/NetworkManager/system-connections/*.nmconnection >/dev/null 2>&1
	    then
		if [ "$nowifi" != "y" ]
		then
		    if [ "$wpa" != "" ]
		    then
			logtoboth "> Plugin $pfx: wpa_supplicant.conf is not used by Network Manager"
			logtoboth "  If your wpa_supplicant.conf contained multiple network connections"
			logtoboth "  only the first one will be defined in Network Manager"
		    fi
		    [ "$wificountry" == "" -o "$wifissid" == "" -o "$wifipassword" == "" ] && getwififromwpa
		    if [ "$wifissid" != "" -a "$wifipassword" != "" -a "$wificountry" != "" ]
		    then
			logtoboth "> Plugin $pfx: Create NetworkManager WiFi configuration"
			logtoboth "  with SSID: '$wifissid' Password: '$wifipassword' WiFi Country: '$wificountry'"
			wificname=${wifissid,,}
			if [ $newnm -eq 1 ]
			then
			    # --offline should work
			    logtoboth "> Plugin $pfx: Configure NetworkManager WiFi connection '$wificname' with SSID '$wifissid'"
			    nmcli --offline c add type wifi con-name $wificname \
				  ifname wlan0 ssid $wifissid wifi-sec.key-mgmt \
				  wpa-psk wifi-sec.psk "$wifipassword" | tee /tmp/$wificname.nmconnection >/dev/null
			    rm -f /etc/NetworkManager/system-connections/$wificname.nmconnection
			    mv /tmp/$wificname.nmconnection /etc/NetworkManager/system-connections/$wificname.nmconnection
			else
			    cat >> $nmdcfg <<EOF
logger "sdm FirstBoot: Configure NetworkManager WiFi connection '$wificname' with SSID '$wifissid'"
nmcli c add type wifi con-name $wificname ifname wlan0 ssid $wifissid
nmcli c modify $wificname wifi-sec.key-mgmt wpa-psk wifi-sec.psk "$wifipassword"
EOF
			fi
			[ "$noipv6" == "y" ] && logtoboth "> Plugin $pfx: Disable ipv6 on Wifi '$wificname'" && modnmconn "ipv6.method disabled" $wificname
		    fi
		fi
	    fi
	    if [ "$zeroconf" == "y" ]
	    then
		logtoboth "> Plugin $pfx: Create zeroconf network configuration for $ifname"
		newdhcp=1  # Assume we'll enable $ifname-dhcp connection
		if grep -qs interface-name=$ifname /etc/NetworkManager/system-connections/*.nmconnection >/dev/null 2>&1
		then
		    newdhcp=0
		    excname=$(grep -l interface-name=$ifname /etc/NetworkManager/system-connections/*.nmconnection 2>/dev/null)
		    [ "$excname" != "" ] && excname="$(basename $excname)" && excname="${excname%.nmconnection}"
		    logtoboth "% Plugin $pfx: Found connection '$excname' for network device '$ifname'"
		    logtoboth "  Connection '$excname' autoconnect settings not modified"
		    logtoboth "  Connection '$ifname-dhcp' autoconnect disabled"
		    logtoboth "  Review connection '$excname' and '$ifname-dhcp' 'autoconnect' and 'autoconnect-priority' settings"
		fi
		adddhcp="c add con-name $ifname-dhcp ifname $ifname type ethernet connection.autoconnect-priority 100 connection.autoconnect-retries 2"
		addzeroconf="c add con-name $ifname-zeroconf type ethernet ifname $ifname connection.autoconnect-priority 50 ipv4.method link-local ipv4.link-local enabled"
		if [ $newnm -eq 1 ]
		then
		    logtoboth "> Plugin $pfx: Create connection '$ifname-dhcp'"
		    nmcli --offline $adddhcp | tee /etc/NetworkManager/system-connections/$ifname-dhcp.nmconnection >/dev/null
		    [ $newdhcp -eq 0 ] && modnmconn "connection.autoconnect false" "$ifname-dhcp"
		    logtoboth "> Plugin $pfx: Create connection '$ifname-zeroconf'"
		    nmcli --offline $addzeroconf | tee /etc/NetworkManager/system-connections/$ifname-zeroconf.nmconnection >/dev/null
		else
		    logtoboth "> Plugin $pfx: Create connection '$ifname-dhcp'"
		    echo "nmcli $adddhcp" >> $nmdcfg
		    [ $newdhcp -eq 0 ] && modnmconn "connection.autoconnect false" "$ifname-dhcp"
		    logtoboth "> Plugin $pfx: Create connection '$ifname-zeroconf'"
		    echo "nmcli $addzeroconf" >> $nmdcfg
		fi
	    fi
	    # Configure powersave if requested
	    if [ "$powersave" != "" ]
	    then
		logtoboth "> Plugin $pfx: Configure WiFi powersave to '$powersave'"
		cat > /etc/NetworkManager/conf.d/010-sdm-powersave.conf <<EOF
[connection]
wifi.powersave = $powersave
EOF
	    fi
	    # If noipv6 requested set it on $ifname's connection(s). Create if it doesn't exist.
	    if [ "$noipv6" == "y" ]
	    then
		if ! grep -qs interface-name=$ifname /etc/NetworkManager/system-connections/*.nmconnection 2>/dev/null
		then
		    lancname="Wired-connection-$ifname"
		    logtoboth "> Plugin $pfx: Add network LAN connection '$lancname' on device '$ifname'"
	    if [ $newnm -eq 1 ]
		    then
			nmcli --offline c add con-name "$lancname" type ethernet ifname $ifname | tee /etc/NetworkManager/system-connections/$lancname.nmconnection >/dev/null
		    else
			echo "nmcli c add con-name "$lancname" type ethernet ifname $ifname" >> $nmdcfg
		    fi
		fi
		while read nmfile
		do
		    IFS="=" read idx cname < <(grep ^id= $nmfile)
		    logtoboth "> Plugin $pfx: Disable ipv6 on connection '$cname'"
		    modnmconn "ipv6.method disabled" "$cname" "$nmfile"
		done < <(grep -l $ifname /etc/NetworkManager/system-connections/*.nmconnection 2>/dev/null)
	    fi
	    compgen -G "/etc/NetworkManager/conf.d/*" >/dev/null && setfileownmode "/etc/NetworkManager/conf.d/*" 644
	    compgen -G "/etc/NetworkManager/system-connections/*" >/dev/null && setfileownmode "/etc/NetworkManager/system-connections/*" 600
	    writeconfig        # rewrite config in case we set wificountry
	    ;;
    esac
    # Don't think this is needed, but keeping jic
    #logtoboth "> Plugin $pfx: Update regulatory database"
    #update-alternatives --set regulatory.db /lib/firmware/regulatory.db-upstream
    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi

#!/bin/bash
#
# This is an sdm plugin for: btwifiset
#
# btwifiset is the back-end service for the iOS app BTBerryWiFi
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
vldargs="|country|localsrc|btwifidir|password|timeout|logfile|"
loadparams

if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "|country|" || exit
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_printkeys
    #
    # Copy the btwifiset files
    #
    [ "$btwifidir" == "" ] && btwifidir="/usr/local/btwifiset"
    branch="main"
    srcurl="https://raw.githubusercontent.com/nksan/Rpi-SetWiFi-viaBluetooth/$branch"
    mkdir -p $SDMPT/$btwifidir
    if [ "$localsrc" != "" ]
    then
	#
	# Copy the btwifiset files from local stash
	#
	logtoboth "> Plugin $pfx: Copy btwifiset from $localsrc to $btwifidir"
	for f in btwifiset.py
	do
	    cp -a $localsrc/$f $SDMPT/$btwifidir/$f
	done
    else
	logtoboth "> Plugin $pfx: Download btwifiset from the internet to $btwifidir"
	for f in btwifiset.py btpassword.py passwordREADME.txt
	do
	    wget $srcurl/$f --output-document=$SDMPT/$btwifidir/$f
	    wsts=$?   # Need to fix this if more files ever added
	done
	if [ ! $wsts ]
	then
	    logtoboth "? Plugin $pfx: Unable to download btwifiset from $srcurl (Error $wsts)"
	    logtoboth "  btwifiset cannot be installed"
	fi
    fi
    logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "|country|"
    #logfreespace "at start of Plugin $pfx Phase 1"

    #
    # set up password
    #
    [ "$btwifidir" == "" ] && btwifidir="/usr/local/btwifiset"
    bt0="/etc/sdm/0piboot/010-btwifiset-password.sh"
    cat >$bt0 <<EOF
#!/bin/bash
#
# Configure btwifiset password
#
source /etc/sdm/sdm-readparams
logger "sdm FirstBoot: Complete btwifiset configuration"
pwd=\$(hostname)
[ "$password" != "" ] && pwd="$password"
running=0
if systemctl --quiet is-active btwifiset
then
    logger "sdm FirstBoot: Stop btwifiset service"
    running=1
    systemctl stop btwifiset >/dev/null 2>&1
fi
logger "sdm FirstBoot: Set btwifiset host bluetooth password to '\$pwd'"
printf "\$pwd\n" >>$btwifidir/crypto
# Restart service if it was running and system is not going to reboot
[[ \$running -eq 1 ]] && [[ \$reboot -eq 0 ]] && logger "Restart btwifiset service" && systemctl start btwifiset
EOF
    # V Assumes Python versions in the form of nn.nn.nn (which they all seem to be)
    pyver=$((python3 --version) | (read p version junk ; echo ${version%.*}))
    pymajver=${pyver%.*}

    pycomponents=""
    for pkg in python${pymajver}-gi libdbus-glib-1-dev libpython${pyver}-dev python3-dbus
    do
	! ispkginstalled $pkg && pycomponents="${pycomponents}${pkg} "
    done
    if pkgexists python${pymajver}-cryptography
    then
	! ispkginstalled $pkg && pycomponents="${pycomponents}python${pymajver}-cryptography "
    fi

    if [ "$pycomponents" != "" ]
    then
	logtoboth "> Plugin $pfx: Install required Python components: $pycomponents"
	doaptrpterror "install --no-install-recommends --yes $pycomponents" $showapt
    fi

    #logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
else
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "|country|"
    #logfreespace "at start of Plugin $pfx Phase post-install"
    [ "$btwifidir" == "" ] && btwifidir="/usr/local/btwifiset"

    # Handle wpa_supplicant.conf
    found=0
    for wpa in /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
    do
	if [ -f $wpa ]
	then
	    found=1
	    if ! grep "country=$country" $wpa > /dev/null 2>&1
	    then
		logtoboth "> Plugin $pfx: Add 'country=$country' to $wpa"
		sed -i "1 a country=$country" $wpa
	    fi
	    if ! grep "update_config=1" $wpa > /dev/null 2>&1
	    then
		logtoboth "> Plugin $pfx: Add 'update=1' to $wpa"
		sed -i "1 a update_config=1" $wpa
	    fi
	fi
    done
    if [ $found -eq 0 ]
    then
	logtoboth "> Plugin $pfx: No wpa_supplicant.conf found; Creating..."
	cat > /etc/wpa_supplicant/wpa_supplicant.conf <<EOF
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
country=$country
update_config=1
EOF
    fi
    # Modify bluetooth service
    logtoboth "> Plugin $pfx: Update bluetooth service ExecStart"
    if ! sed -n '/^ExecStart/p' /lib/systemd/system/bluetooth.service | grep -q '\-\-experimental'
    then
	# Append --experimental to end of command line
	sed 's/^ExecStart.*bluetoothd\b/& --experimental/' /lib/systemd/system/bluetooth.service > /etc/systemd/system/bluetooth.service
    else
	cp /lib/systemd/system/bluetooth.service /etc/systemd/system
    fi
    if ! sed -n '/ExecStart/p' /etc/systemd/system/bluetooth.service | grep -q '\-P battery'
    then
	# Append -P battery to end of command line
	sed -i 's/^ExecStart.*experimental\b/& -P battery/' /etc/systemd/system/bluetooth.service
    fi

    # Undo sdm disable wifi and bluetooth if done

    [ -f /etc/sdm/0piboot/050-disable-bt.sh ]   && mv /etc/sdm/0piboot/050-disable-bt.sh /etc/sdm/0piboot/.050-disable-bt.sh-btwifiset
    [ -f /etc/sdm/0piboot/055-disable-wifi.sh ] && mv /etc/sdm/0piboot/055-disable-wifi.sh /etc/sdm/0piboot/.055-disable-wifi.sh-btwifiset

    # Create btwifiset service
    logtoboth "> Plugin $pfx: Create and enable btwifiset service"
    [ "$timeout" != "" ] && switches="--timeout $timeout" || switches=""
    [ "$logfile" != "" ] && switches="$switches --logfile $logfile" || switches="$switches --syslog"
    cat >> /etc/systemd/system/btwifiset.service <<EOF
[Unit]
Description=btwifi Configure Wi-Fi over Bluetooth
After=hciuart.service bluetooth.target

[Service]
Type=simple
ExecStart=/bin/python3 $btwifidir/btwifiset.py $switches

[Install]
WantedBy=multi-user.target
EOF
    #
    # Link bluetooth.target.wants to the correct copy of bluetooth.service
    #
    systemctl enable btwifiset.service >/dev/null 2>&1
    if [ -f /etc/systemd/system/bluetooth.target.wants/bluetooth.service ]
    then
	rm -f /etc/systemd/system/bluetooth.target.wants/bluetooth.service
	ln -s /etc/systemd/system/bluetooth.service /etc/systemd/system/bluetooth.target.wants/bluetooth.service
    fi
    if [ -f /etc/systemd/system/dbus-org.bluez.service ]
    then
	rm -f /etc/systemd/system/dbus-org.bluez.service
	ln -s /etc/systemd/system/bluetooth.service /etc/systemd/system/dbus-org.bluez.service
    fi

    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi

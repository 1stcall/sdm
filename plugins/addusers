#!/bin/bash
#
# This is an sdm plugin for: addusers
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#
#    --plugin addusers:"username=username|password=password|homedir=homedir|nosudo=y|uid=uid|samba=y|smbpasswd=password|nohomedir=y|groups=grplist"
# OR --plugin addusers:"userlist=/path/to/list"
#   where
#      list has lines with: username=username|password=password|homedir=homedir|sudo=y|uid=uid|samba=y|smbpasswd=password|nohomedir=y|groups=grplist
#           If list specified, the other arguments are ignored
#
# At least one of username or userlist must be specified.
# If samba=y and username already exists, smbpasswd will be set for the specified user
# Warning issued if samba=y is set and samba isn't installed
# If log= is provided it is the full path to a file on the host where the added user(s) information is logged
#  Note: This log is written in Phase 0 and is on the host OS
#        Because of this, messages will actually be issued twice: Once in Phase 0 when writing the log,
#         and additional messages in the post-install Phase when are changes actually made
#
# Users are added/modified in the post-install phase so there's no ordering requirement with the samba plugin
#

function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

function logadduser() {
    # Must be in Phase 0
    local user="$1" homedir="$2" uid="$3" pwd="$4" nohomedir="$5" agroups="$6" nosudo="$7" samba="$8" smbpasswd="$9"
    local imgorhost=""
    if [ "$log" != "" ]
    then
	# What to log? Can only log hostname if in burn, but could log imgname in other phases
	# date IMG($dimg) or host name ($hostname)  [ $SDMNSPAWN-conditioned ]
	#      username:user
	#      homedir:homedir (? need to default this in adduser?)
	#      password:
	#      (other settings)
	#
	[[ "$SDMNSPAWN" =~ "Burn" ]] && imgorhost="Host: $hostname" || imgorhost="$(basename $dimg)"
        [ -f $log ] || printf "%-19s %-45s %-16s\n" "Date" "IMG or Hostname" "User" > $log
        printf "%-19s %-45s %-16s\n" "$(date +'%Y-%m-%d %H:%M:%S')" "$imgorhost" "$user" >> $log
	settings="" ; settings2=""
	[ "$pwd" != "" ] && settings="password:$pwd "
	[ "$uid" != "" ] && settings="${settings}uid:$uid "
	[ "$homedir" != "" ] && settings="${settings}homedir:$homedir "
	[ "$nohomedir" != "" ] && settings="${settings}nohomedir:$nohomedir "
	[ "$nosudo" != "" ] && settings2="${settings2}nosudo:$nosudo " 
	[ "$samba" != "" ] && settings2="${settings2}samba:$samba "
	[ "$smbpasswd" != "" ] && settings2="${settings2}smbpasswd:$smbpasswd"
	printf "%-19s %s\n" " " "$settings" >> $log
	#logtoboth "> Plugin $pfx: Add username:$username"
	[ "$agroups" == "default" -o "$agroups" == "" ] && agroups="$groups"
	[ "$agroups" != "" ] && printf "%-19s %s\n" " " "groups:$agroups" >> $log #&& logtoboth "  Plugin $pfx:     groups:$agroups" 
	[ "$settings2" != "" ] && printf "%-19s %s\n" " " "$settings2" >> $log    #&& logtoboth "  Plugin $pfx:     $settings2"      
    fi
}

function au_adduser () {
    #
    # $1: username
    # $2: home dir
    # $3: uid
    # $4: password
    # $5: nohomedir "y" if no homedir otherwise homedir created
    # $6: groups (comma-separated) or ""
    # $7: nosudo "y" to disable sudo for user
    # $8: samba "y" to enable samba for user [Samba must already be installed]
    # $9: samba password. If "", uses $4
    #
    #
    local user="$1" homedir="$2" uid="$3" pwd="$4" nohomedir="$5" agroups="$6" nosudo="$7" samba="$8" smbpasswd="$9"
    local hdsw="" uidsw="" hdir=""
    if [[ "${nohomedir,,}" =~ "y" ]]
    then
	hdsw="--no-create-home"
    else
	[ "$homedir" != "" ] && hdir="$homedir" || hdir="/home/$user"
	hdsw="--create-home --home-dir $hdir"
    fi
    if [ "$uid" != "" ]
    then
	uidsw="--uid $uid"
	getent group $uid > /dev/null && logtoboth "% UID '$uid' already in /etc/group; ignoring" && uidsw=""
    else
	uidsw=""
    fi
    if getent passwd $user > /dev/null
    then
	logtoboth "% Plugin $pfx: User '$user' already in /etc/passwd"
    else
	logtoboth "> Plugin $pfx: Add user '$user'"
	[ "$hdir" != "" ] && logtoboth "> Plugin $pfx: Create home directory '$hdir' for user '$user'" || logtoboth "> Plugin $pfx: No home directory created for user '$user'"
	if ! useradd $hdsw $uidsw $user
	then
	    logtoboth "? Plugin $pfx: Useradd returned an error"
	fi
    fi
    #
    # Modify account per settings
    #
    if getent passwd $user > /dev/null
    then
	[ "$agroups" == "default" -o "$agroups" == "" ] && agroups="$groups"
	[ "$agroups" != "" ] && usermod --groups $agroups $user && logtoboth "> Plugin $pfx: Add groups to user '$user': $agroups"
	[ "$pwd" != "" ] && logtoboth "> Plugin $pfx: Set password for user '$user'" && chpasswd <<EOF
$user:$pwd
EOF
	if ! [[ "${nosudo,,}" =~ "y" ]]
	then
	    logtoboth "% Plugin $pfx: Enable sudo for user '$user'"
	    echo "$user ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/010_$user-nopasswd
	    chmod 440 /etc/sudoers.d/010_$user-nopasswd
	else
	    logtoboth "% Plugin $pfx: sudo not enabled for user '$user'"
	fi
	if [[ "${samba,,}" =~ "y" ]]
	then
	    if dpkg-query -W samba > /dev/null 2>&1
	    then
		logtoboth "> Plugin $pfx: Set smbpasswd for user '$user'"
		[ "$smbpasswd" != "" ] && smbpasswd=$pwd
		if [ "$smbpasswd" != "" ]
		then
		    (echo "$smbpasswd" ; echo "$smbpasswd") | smbpasswd -s -a "$user"
		else
		    logtoboth "% Plugin $pfx: Skip smbpasswd for user '$user'; no password or smbpasswd provided"
		fi
	    else
		logtoboth "% Plugin $pfx: Samba not installed; Skip smbpasswd for user '$user'"
	    fi
	fi
    fi
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
vldargs="|username|homedir|uid|password|nohomedir|groups|ugroups|nosudo|samba|smbpasswd|userlist|log|"
loadparams
[[ "$args" =~ "groups=" ]] && args="${args/groups=/ugroups=}"
if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs"
    #
    # Print the keys found (example usage). plugin_getargs returns the list of found keys in $foundkeys
    #
    plugin_printkeys
    if [ "$userlist" != "" ]
    then
	if [ -f $userlist ]
	then
	    logtoboth "> Plugin $pfx: Copy userlist file '$userlist' to IMG /etc/sdm/assets/addusers-$(basename $userlist)"
            cp -a $userlist $SDMPT/etc/sdm/assets/addusers-$(basename $userlist)
	    while read line
	    do
		[[ "$line" =~ "groups=" ]] && line="${line/groups=/ugroups=}"
		plugin_getargs $pfx "$line" "$vldargs"
		#plugin_printkeys
	    logadduser "$username" "$homedir" "$uid" "$password"  "$nohomedir" "$ugroups" "$nosudo" "$samba" "$smbpasswd"		
	    username="" ; homedir="" ; uid="" ; password="" ; nohomedir="" ; ugroups="" ; nosudo="" ; samba="" ; smbpasswd=""
	    done < $userlist
	else
	    logtoboth "% Plugin $pfx: Cannot find userlist file '$userlist'; ignoring"
	fi
    else
	if [ "$username" != "" ]
	then
	    logadduser "$username" "$homedir" "$uid" "$password"  "$nohomedir" "$ugroups" "$nosudo" "$samba" "$smbpasswd"
	else
	    logtoboth "% Plugin $pfx: Neither username nor userlist arguments provided; Nothing to do"
	fi
    fi
    logtoboth "* Plugin $pfx: Complete Phase 0"

elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    #logfreespace "at start of Plugin $pfx Phase 1"
    plugin_getargs $pfx "$args" "$vldargs"
    #logfreespace "at end of $pfx Phase 1"
    logtoboth "* Plugin $pfx: Complete Phase 1"
else
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs"
    [ "$userlist" == "" ] && ul="" || ul="/etc/sdm/assets/addusers-$(basename $userlist)"
    if [ "$userlist" != "" ]
    then
	if [ -f $ul ]
	then
	    while read line
	    do
		[[ "$line" =~ "groups=" ]] && line="${line/groups=/ugroups=}"
		plugin_getargs $pfx "$line" "$vldargs"
		#plugin_printkeys
		if [ "$username" != "" ]
		then
		    au_adduser "$username" "$homedir" "$uid" "$password"  "$nohomedir" "$ugroups" "$nosudo" "$samba" "$smbpasswd"
		else
		    logtoboth "% Plugin $pfx: No username specified: $line"
		fi
		username="" ; homedir="" ; uid="" ; password="" ; nohomedir="" ; ugroups="" ; nosudo="" ; samba="" ; smbpasswd=""
	    done < $ul
	else
	    logtoboth "% Plugin $pfx: Cannot find userlist file '$ul'"
	fi
    else
	if [ "$username" != "" ]
	then
	    au_adduser "$username" "$homedir" "$uid" "$password"  "$nohomedir" "$ugroups" "$nosudo" "$samba" "$smbpasswd"
	else
	    logtoboth "% Plugin $pfx: No username specified"
	fi
    fi
    [ "$ul" != "" ] && rm -f $ul
    #logfreespace "at start of Plugin $pfx Phase post-install"

    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi

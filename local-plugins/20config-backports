#!/usr/bin/env bash
#
set -e
#
function pluginHelp(){
    # 2 X tabs in heredoc added with vscode keybinding ctrl+k [tab]
    cat <<-EOF

		I: plugin: '${pfx}' phase: '${phase:-help}'
		W: *** THIS IS STRICTLY A WORK IN PROGRESS WITH VALUES HARD CODED.  USE WITH CAUTION. ***

		This is an sdm plugin for: ${pfx}.  This plugin will configure apt to use the backports repository.

		The plugin is called three times: for Phase 0 (Mounted environment), Phase 1 (in nspawn), and Phase 2 (post-install).
		'\$1' is the phase: "0", "1", or "post-install"
		'\$2' is the argument list: arg1=val1|arg2=val2|arg3=val3| ...

		Valid arguments to this plugin are:-
		    assetDir        -   Directory where local assets such as common.sh are stored.
		    DEBUG           -   Debug level for debug messages and breakpoints.
		    LOGPREFIX       -   Prefix for debug log messages
		    upgradeRelease  -   Release to upgrade to.  Valid option is currently bookworm.  Defaults to bookworm if empty.

		W: *** THIS IS STRICTLY A WORK IN PROGRESS WITH VALUES HARD CODED.  USE WITH CAUTION. ***

	EOF
}
#
# Main code for the Plugin
#
phase=${1}
pfx="$(basename "$0")"     #For messages
args="$2"
#
# Check that phase is set to check if we are running within sdm.  If not set 
# or set to help, then display help text & exit.
#
[[ ! "0 1 post-install" =~ (^| )${phase}($| ) ]] && pluginHelp && exit 0
#
# shellcheck source=../sdm-readparams
source "$SDMPT"/etc/sdm/sdm-readparams
#DEBUG=${custom1:-0} && LOGPREFIX=${custom2:-"${pfx}"}
plugin_getargs "$pfx" "$args" "|assetDir|DEBUG|LOGPREFIX|upgradeRelease|"
#
if ! [ -f "$SDMPT"/etc/sdm/local-assets/common.sh ] 
then 
    cp -av "${assetDir:-}"/common.sh "$SDMPT"/etc/sdm/local-assets/common.sh
fi
#
# shellcheck source=../assets/common.sh
source "$SDMPT"/etc/sdm/local-assets/common.sh
fDebugLog 2 "* Plugin $pfx: Sucessfully sourced $SDMPT/etc/sdm/local-assets/common.sh " wait
#
# Default to sid if upgradeRelease is empty.
upgradeRelease=${upgradeRelease:-bookworm} 
#
if [[ "$phase" == "0" ]]
then
    #
    # In Phase 0 (Mounted environment) all references to directories in the image must be preceded by $SDMPT
    #
    fDebugLog 1 "* Plugin $pfx: Start Phase 0 (Mounted environment)"
    fDebugLog 3 "* Plugin $pfx:- $(pluginHelp)"
    fDebugLog 3 "$(plugin_printkeys)"
#    fDebugLog 2 "* Plugin $pfx: Nothing to do"
#
    fDebugLog 2 "* Plugin $pfx: Copying $assetDir/$upgradeRelease-backports.list > $SDMPT/etc/apt/sources.list.d/"
    ${cpCmd:-} "$assetDir/$upgradeRelease-backports.list" "$SDMPT/etc/apt/sources.list.d/"
    # 
    fDebugLog 2 "* Plugin $pfx: Copying $assetDir/90_$upgradeRelease-backports > $SDMPT/etc/apt/preferences.d/"
    $cpCmd "$assetDir/90_$upgradeRelease-backports" "$SDMPT/etc/apt/preferences.d/"
    #
    fDebugLog 1 "* Plugin $pfx: Complete Phase 0 (Mounted environment)" yesno 4
    #
elif [[ "$phase" == "1" ]]
then
    #
    # Phase 1 (in nspawn)
    #
    fDebugLog 1 "* Plugin $pfx: Start Phase 1 (in nspawn)"
    fDebugLog 3 "* Plugin $pfx:- $(pluginHelp)"
    fDebugLog 3 "$(plugin_printkeys)"
    fDebugLog 2 "* Plugin $pfx: Nothing to do"
    fDebugLog 1 "* Plugin $pfx: Complete Phase 1 (in nspawn)" yesno
    #
else
    #
    # Plugin Phase 2 (post-install) edits
    #
    fDebugLog 1 "* Plugin $pfx: Start Phase Phase 2 (post-install)"
    fDebugLog 3 "* Plugin $pfx:- $(pluginHelp)"
    fDebugLog 3 "$(plugin_printkeys)"
    fDebugLog 2 "* Plugin $pfx: Nothing to do"
    fDebugLog 1 "* Plugin $pfx: Complete Phase Phase 2 (post-install)" yesno
fi


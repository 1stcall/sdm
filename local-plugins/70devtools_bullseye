#!/usr/bin/env bash
#
set -e
#
function pluginHelp(){
    # tabs in heredoc added with vscode keybinding ctrl+k [tab]
    cat <<-EOF 1>&2
		I: plugin: '${pfx}' phase: '${phase:-help}'
		W: *** THIS IS STRICTLY A WORK IN PROGRESS WITH VALUES HARD CODED.  USE WITH CAUTION. ***

		This is an sdm plugin for: ${pfx}.  This installs some tools that I use in my development environments.

		The plugin is called three times: for Phase 0 (Mounted environment), Phase 1 (in nspawn), and Phase 2 (post-install).
		'\$1' is the phase: "0", "1", or "post-install"
		'\$2' is the argument list: arg1=val1|arg2=val2|arg3=val3| ...

		Valid arguments to this plugin are:-
		    assetDir    -   Directory where local assets such as common.sh are stored.
		    DEBUG       -   Debug level for debug messages and breakpoints.
		    LOGPREFIX   -   Prefix for debug log messages

		Example:    --plugin ${pfx}:assetDir=/home/username/my-sdm-assets|DEBUG=1|LOGPREFIX=cutomise-script.sh"

		To do:       Add args for apt-get's [no]install-recomends parameter.
		            Add args for using a file for a list of packages to install.
		            Alternativly, break down into multiple plugins, 1 for each package.

		W: *** THIS IS STRICTLY A WORK IN PROGRESS WITH VALUES HARD CODED.  USE WITH CAUTION. ***

	EOF
}
#
# Main code for the Plugin
#
phase=${1}
pfx="$(basename "$0")"     #For messages
args="$2"
#
# Check that phase is set to check if we are running within sdm.  If not set 
# or set to help, then display help text & exit.
#
#[[ -z ${phase} ]] || [[ ${phase} =~ help ]] && pluginHelp && exit 0
[[ ! "0 1 post-install" =~ (^| )${phase}($| ) ]] && pluginHelp && exit 0
#
# shellcheck source=../sdm-readparams
source "$SDMPT"/etc/sdm/sdm-readparams
plugin_getargs "$pfx" "$args" "|assetDir|DEBUG|LOGPREFIX|"
#
if ! [[ -f "$SDMPT"/etc/sdm/local-assets/common.sh ]] 
then 
    cp -av "${assetDir:-}"/common.sh "$SDMPT"/etc/sdm/local-assets/common.sh
fi
#
# shellcheck source=../assets/common.sh
source "$SDMPT"/etc/sdm/local-assets/common.sh
fDebugLog 2 "* Plugin $pfx: Sucessfully sourced $SDMPT/etc/sdm/local-assets/common.sh " wait
#
if [[ "$phase" == "0" ]]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    fDebugLog 1 "* Plugin $pfx: Start Phase 0 (Mounted environment)"
    fDebugLog 3 "$(plugin_printkeys)"
    #
    fDebugLog 2 "* Plugin $pfx: Nothing to do"
    #
    fDebugLog 1 "* Plugin $pfx: Complete Phase 0 (Mounted environment)" wait
    #
elif [[ "$phase" == "1" ]]
then
    #
    # Phase 1 (in nspawn)
    #
    fDebugLog 1 "* Plugin $pfx: Start Phase 1 (in nspawn)"
    fDebugLog 3 "$(plugin_printkeys)"
    #
    fDebugLog 3 "$(logfreespace "at start of Plugin $pfx Phase 1 (in nspawn)")"
    #
    fDebugLog 2 "> Plugin $pfx: Install tailscale repo and gpg key."
    curl -fsSL https://pkgs.tailscale.com/stable/debian/bullseye.noarmor.gpg \
        | "${teeCmd:-}" "$SDMPT"/usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
    curl -fsSL https://pkgs.tailscale.com/stable/debian/bullseye.tailscale-keyring.list \
        | "$teeCmd" "$SDMPT"/etc/apt/sources.list.d/tailscale.list
    doaptrpterror update "${showapt:-}"
    #
    fDebugLog 2 "> Plugin $pfx: Install nmap, tcpdump, tailscale, gparted, systemd-container, shellcheck, jq"
    doaptrpterror "install --no-install-recommends -y nmap tcpdump gparted systemd-container shellcheck jq" "${showapt}"
    #
    fDebugLog 3 "$(logfreespace "at end of $pfx Phase 1 (in nspawn)")"
    #
    fDebugLog 1 "* Plugin $pfx: Complete Phase 1 (in nspawn)" wait
    #
else
    #
    # Plugin Post-install edits
    #
    fDebugLog 1 "* Plugin $pfx: Start Phase post-install"
    #
    fDebugLog 2 "> Plugin $pfx: Installing & enabling systemd-networkd & systemd-resolved"
    doaptrpterror "install --no-install-recommends -y systemd-resolved" "${showapt}"
    systemctl enable systemd-networkd systemd-resolved
    #
    fDebugLog 1 "* Plugin $pfx: Complete Phase post-install" wait
    #
fi

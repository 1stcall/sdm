#!/bin/bash
#
#
# Manage, customize, or burn an SD Card from a Raspbian image
#
# Useful for maintaining one or more Pis. The general idea is to keep a "golden" image
# fully configured to suit your needs. Then, whenever you need a new SD Card (testing, new Pi, etc),
# start with the golden master. Also, when new Raspbian releases come out, sdm can be used
# to easily build a fresh SD Card image for the new release.
#
# This script provides the infrastructure for your customization scripts to work
# in a repeatable manner against an RPF-provided IMG file. 
#
# sdm [switches] image-name
# sdm --help will provide help on all available switches
#
# RPi SD Card Image management phases. See README.md for details
# Phase   Tasks
#     0   Copy files into unzipped IMG file (sdm calls phase0 script)
#         IMG file mounted so files can easily be copied into the IMG file
#     1   Nspawn into image to execute in the image context (via sdm)
#         APT packages can be installed in phase 1 so available on every SD card
#         Your custom script can be as automatic or manual as you choose
#         See sdm-customphase, sdm-base-installs, and sdm-X-installs for examples
#     2   Write SD card from the IMG file (via sdm --burn)
#         Target system name is inserted onto the card after it's written
#     3   Boot the newly-created SD card
#

function docleanup() {
    umount -v /mnt/sdm/{boot,}
    [ "$loop" != "" ] && losetup -d $loop
    sync
}

function domount() {
    echo "Mounting IMG file '$dimg'"
    [ ! -d /mnt/sdm ] && mkdir /mnt/sdm
    loop=$(losetup --show -P -f $dimg)
    mount -v ${loop}p2 /mnt/sdm
    mount -v ${loop}p1 /mnt/sdm/boot
}

function ismounted() {
    if grep -qs $1 /proc/mounts
    then
	return 0
    else
	return 1
    fi
}

function extendimage() {
    local ldimg=$1 limgext=$2
    local line dsiz
    dd if=/dev/zero bs=1M count=$limgext status=progress >> $ldimg

    # Get the actual size of the image file from parted
    while read line ; do
	if [[ "$line" =~ "Disk" ]] 
	then
	    if [[ ! "$line" =~ "Flags:" ]]   # Only want the Disk size line, not one with "Disk Flags"
	    then
                                     # Disk img-file-name.img:    nnnnMB
		dsiz="${line##*:}"   # Get String following ":"
		dsiz="${dsiz##\ }"   # Strip leading spaces
		dsiz="${dsiz%%\ }"   # Strip trailing spaces
	    fi
	fi
    done < <(parted $ldimg <<EOF
print
EOF
) # This closes the above parted command
    echo "Resizing partition 2 and file system"
    parted $ldimg <<EOF
resizepart 2 $dsiz
EOF
}

function poptcheck() {
    #
    # Check poptions settings against valid settings
    # Report errors and exit
    #
    local popt="$1" badopt=""
    if [ "$popt" != "" ]
    then
	readarray -d, xopt <<< $1
	for o in ${xopt[@]}
	do
	    os="${o%,}"
	    os="${os# }"
	    if ! [[ "$vpoptions" =~ $os ]]
	    then
		[ "$badopt" != "" ] && badopt="$badopt, '$os'" || badopt="'$os'"
	    fi
	done
	[ "$badopt" != "" ] && echo "? Unrecognized --poption value(s) $badopt" && exit
    fi
}
function findappfile() {
    #
    # $1 = app/xapp variable
    # $2 = app/xapp output variable
    #
    # Updates app/xapp output variable with actual file location
    # or the value of $1 if it's not a file location (no leading '@')
    #
    if [ "${1:0:1}" == "@" ]
    then
	fn="${1:1:999}"
	if [ ! -f "$fn" ]
	then
	    fnc="$src/$(basename $fn)"
	    if [ ! -f "$fnc" ]
	    then
		echo "? $2 file '$fn' not found"
		exit
	    else
		eval "${2}=\"@$fnc\""
	    fi
	else
	    eval "${2}=\"$1\""
	fi
    else
	eval "${2}=\"$1\""
    fi
}

function getapplist() {
    #
    # $1 has list of apps or @file with list of apps
    # $2 has variable name to set with list of apps
    #
    local lapps=""
    if [ "${1:0:1}" == "@" ]
    then
	fn="${1:1:999}"
	while read line
	do
	    #
	    # Strip trailing spaces, tabs, and comments
	    #
            newapp="${line%%\#*}"    # Del EOL comments
            newapp="${newapp%"${newapp##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    [ "$newapp" != "" ] && lapps="$lapps $newapp"
	done < $fn
    else
	lapps="$1"
    fi
    lapps="${lapps## }"      # Del leading spaces
    eval "${2}=\"$lapps\""
}

function writeconfig() {
    #
    # Write config parameters into the image
    #
    [ -f /mnt/sdm/etc/sdm/cparams ] && rm -f $paramfile
    echo "#Arguments passed from sdm into the IMG on $(date +'%Y-%m-%d %H:%M:%S')" > $paramfile
    echo "apps:\"$apps\"" >> $paramfile
    echo "xapps:\"$xapps\"" >> $paramfile
    echo "appfile:$appfile" >> $paramfile
    echo "xappfile:$xappfile" >> $paramfile
    echo "aptcache:$aptcache" >> $paramfile
    echo "aptconfirm:$aptconfirm" >> $paramfile
    echo "batch:$fbatch" >> $paramfile
    echo "bootadd:$bootadd" >> $paramfile
    echo "bootconfig:$bootconfig" >> $paramfile
    echo "cscript:$cscript" >> $paramfile
    echo "csrc:$csrc" >> $paramfile
    echo "datefmt:$datefmt" >> $paramfile
    echo "ecolors:$ecolors" >> $paramfile
    echo "eeprom:$eeprom" >> $paramfile
    echo "hdmigroup:$hdmigroup" >> $paramfile
    echo "hdmimode:$hdmimode" >> $paramfile
    echo "myuid:$myuid" >> $paramfile
    echo "myuser:$myuser" >> $paramfile
    echo "poptions:$poptions" >> $paramfile
    echo "rootpwd:$rootpwd" >> $paramfile
    echo "showapt:$showapt" >> $paramfile
    echo "src:$src" >> $paramfile
    echo "custom1:$custom1" >> $paramfile
    echo "custom2:$custom2" >> $paramfile
    echo "custom3:$custom3" >> $paramfile
    echo "custom4:$custom4" >> $paramfile
}

#
# Initialize and Parse the command
#
#
version="V2.1"
apps=""                     #List of apps to install in sdm-base-installs
aptcache=""                 #IP address of apt-cacher-ng server
aptconfirm=0                #1=Pause before apt commands in sdm-apt-install and sdm-X-install
bootadd=""                  #Items to add to /boot/config.txt
bootconfig=""               #/boot/config.txt items to set
burn=0                      #1=Burn the image to the SD card
burndev=""                  #SD card device name for --burn
csrc=""                     #Source directory for use by Custom Phase script
cscript=""                  #Custom Phase script
datefmt="%Y-%m-%d %H:%M:%S" #Default date format for history log
ddsw="bs=16M oflag=direct"  #Switches for dd
ecolors="blue:gray:red"     #fg:bg:cursor
eeprom=""                   #If set, edit /etc/default/rpi-eeprom-update
fbatch=0                    #1=nspawn "batch" mode (non-interactive). Do Phase1 and exit
fdomount=0                  #1=Do a mount and drop into bash
fexplore=0                  #1=Just fire up nspawn to explore the system
fextendonly=0               #1=extend image by xmb MB and then exit
fglamor=1                   #1=Use glamor in Xephyr 
hdmigroup=""                #If set, edit /boot/config.txt and set
hdmimode=""                 #If set, edit /boot/config.txt and set
hname=""                    #Host name when using --burn
imgext=2048                 #Number of MB to extend IMG (2048MB = 2GB)
                            #Must be large enough to accomodate all packages you want to install
myuser=""                   #Non-root user to create. Default is no non-root user created
myuid=""                    #UID for non-root user if created
noextend=0                  #1=Do not extend image
nspawnsw=""                 #Switches for nspawn
poptions=""                 #Phase options
pvers=0                     #Print version number
vpoptions="firstboot,apps,noupgrade,xwindows,xdmconsole" #Valid --poptions
rootpwd=0                   #1=Set root password as well
showapt=0                   #1=Display apt output on terminal as well as logging
vdesktop=0                  #1=Start a vdesktop windows session
xapps=""                    #List of X apps to install in sdm-X-installs
custom1=""                  #For custom use
custom2=""                  #For custom use
custom3=""                  #For custom use
custom4=""                  #For custom use
#
# custom.ized is created in the image so that the Phase 0 customization only done once automatically
#
sdmdone="/mnt/sdm/etc/sdm/custom.ized"
paramfile="/mnt/sdm/etc/sdm/cparams"

[[ ! $EUID -eq 0 ]] && echo "? Please run as root: sudo $0 $*" && exit 1
[ "$(which systemd-nspawn)" == "" ] && echo "? Cannot find systemd-nspawn" && echo "? Please 'sudo apt install systemd-container' first" && exit
#
# Parse the command line
#
cmdline="$0 $*"
OARGS=$(getopt -o h --longoptions help,apps:,aptcache:,aptconfirm,batch,bootadd:,bootconfig:,burn:,,cscript:,csrc:,datefmt:,ddsw:,dims:,ecolors:,eeprom:,explore,extend,hdmigroup:,hdmimode:,host:,hostname:,mount,noextend,noglamor,nspawnsw:,poptions:,rootpwd,showapt,uid:,user:,xapps:,xmb:,custom1:,custom2:,custom3:,custom4:,version -n 'sdm' -- "$@")
[ $? != 0 ] && echo "? sdm: Command parse failed!" && exit 1
eval set -- "$OARGS"

while true
do
    case "$1" in
	# 'shift 2' if switch has argument, else just 'shift'
	--apps)        apps=$2       ; shift 2 ;;
	--aptcache)    aptcache=$2   ; shift 2 ;;
	--aptconfirm)  aptconfirm=1  ; shift ;;
	--batch)       fbatch=1      ; shift ;;
	--bootadd)     bootadd=$2    ; shift 2 ;;
	--bootconfig)  bootconfig=$2 ; shift 2 ;;
	--burn)        burn=1 ;
		       burndev=$2    ; shift 2 ;;
	--ecolors)     ecolors=$2    ; shift 2 ;;
	--cscript)     cscript=$2    ; shift 2 ;;
	--csrc)        csrc=$2       ; shift 2 ;;
	--datefmt)     datefmt=$2    ; shift 2 ;;
	--ddsw)        ddsw=$2       ; shift 2 ;;
	--dims)        windim=$2     ; shift 2 ;;
	--eeprom)      eeprom=$2     ; shift 2 ;;
	--explore)     fexplore=1    ; shift ;;
	--extend)      fextendonly=1 ; shift ;;
	--hdmigroup)   hdmigroup=$2  ; shift 2 ;;
	--hdmimode)    hdmimode=$2   ; shift 2 ;;
	--hostname|--host) hname=$2  ; shift 2 ;;
	--mount)       fdomount=1    ; shift ;;
	--noextend)    noextend=1    ; shift ;;
	--noglamor)    fglamor=0     ; shift ;;
	--nspawnsw)    nspawnsw=$2   ; shift 2 ;;
	--poptions)    poptions=$2   ; shift 2 ;;
	--rootpwd)     rootpwd=1     ; shift ;;
	--showapt)     showapt=1     ; shift ;;
	--uid)         myuid=$2      ; shift 2 ;;
	--user)        myuser=$2     ; shift 2 ;;
	--vdesktop)    vdesktop=1    ; shift ;;
	--xapps)       xapps=$2      ; shift 2 ;;
	--xmb)         imgext=$2     ; shift 2 ;;
	--custom1)     custom1=$2    ; shift 2 ;;
	--custom2)     custom2=$2    ; shift 2 ;;
	--custom3)     custom3=$2    ; shift 2 ;;
	--custom4)     custom4=$2    ; shift 2 ;;
	--version)     pvers=1       ; shift ;;
	--)            shift ; break ;;
	-h|--help)     echo "sdm $version" ;
echo "" ;
echo "Usage:" ;
echo "sudo sdm [switches] disk-image-file" ;
echo "Customize an SD Card image (no --burn, --explore, or --extend)" ;
echo "   sudo sdm sd-image-file" ;
echo " or drop into an nspawn shell in the SD Card image (--explore)" ;
echo "   sudo sdm --explore sd-image-file" ;
echo " or burn an SD Card image to an SD Card (--burn)" ;
echo "   sudo sdm --burn /dev/sdx --host target-hostname sd-image-file" ;
echo " or mount SD Card image into file system for inspection/modification (Be VERY Careful!)" ;
echo "   sudo sdm --mount sd-image-file" ;
echo "" ;
echo "Switches" ;
echo " --burn devname      Copy the image to the SD card" ;
echo " --host hostname     Hostname to burn into the image with --burn" ;
echo " --explore           Explore (nspawn shell) into image" ;
echo " --mount             Mount IMG file partitions and drop into bash" ;
echo " --datefmt str       Use this date format in logs [%Y-%m-%d %H:%M:%S]" ;
echo "  * Customization switches (no --burn, --explore, or --mount) *" ;
echo " --apps applist      List of app packages to install or @file with list" ;
echo " --xapps applist     List of X11 packages to install or @file with list" ;
echo " --aptcache serverip Use apt-cacher-ng with server 'serverip'" ;
echo " --aptconfirm        Enable confirmation before apt commands" ;
echo " --batch             Perform Phase 1 in the container and exit" ;
echo " --bootadd key:value,key:value,... Add new keys and values to /boot/config.txt" ;
echo " --bootconfig key:value,key:value,... Update and uncomment items in /boot/config.txt" ;
echo " --cscript script    Custom Phase Configuration script" ;
echo " --csrc dir          Source directory passed for Custom Phase scripts" ;
echo " --custom[1-4] str   Can be used in Custom cscripts" ;
echo " --ddsw str          Switches for dd command [bs=16M oflag=direct]" ;
echo " --eeprom str        Set the Pi eeprom directory" ;
echo " --extend            Only extend the image; no other customizations" ;
echo " --noextend          Do not extend the image" ;
echo " --hdmigroup n       Set /boot/config.txt hdmigroup value" ;
echo " --hdmimode n        Set /boot/config.txt hdmimode value" ;
echo " --host hostname     Hostname to write onto SD Card with --burn" ;
echo " --noextend          Don't extend the image file" ;
echo " --nspawnsw str      Additional switches for nspawn command" ;
echo " --poptions str      Set Phase 1 auto-run options" ;
echo " --rootpwd           Set a root password into the image" ;
echo " --showapt           Display apt output as well as logging it" ;
echo " --uid uid           UID for non-root user [next free]" ;
echo " --user username     Non-root user to create" ;
echo " --xmb n             Extend image file by n MB [2048]" ;
echo " --version           Print sdm version number" ;
shift ; exit ;;
	*) echo "? $0: Internal error!" ; exit 1 ;;
    esac
done

dimg="$1"
src=$(dirname $0)

[ $pvers -eq 1 ] && echo "sdm $version" && exit
[ "$dimg" == "" ] && echo "? No disk image specified" && exit
[ ! -f "$dimg" ] && echo "? Disk image file '$dimg' does not exist" && exit
#
# Adjust settings based on switches and check for conflicting switches
# and erroneous switch values
#
[ $fexplore -eq 1 -o $vdesktop -eq 1 ] && noextend=1

if [ "$cscript" != "" ]
then
    if [ ! -x "$cscript" ]
    then
	fn="$src/$(basename $cscript)"
	if [ -x "$fn" ]
	then
	    cscript=$fn
	fi
    fi
fi
[ $burn -eq 1 -a $fdomount -eq 1 ] && echo "? Conflicting switches: --burn and --mount" && exit
[ $burn -eq 1 -a $fexplore -eq 1 ] && echo "? Conflicting switches: --burn and --explore" && exit
[ $fdomount -eq 1 -a $fexplore -eq 1 ] && echo "? Conflicting switches: --mount and --explore" && exit
[ "$src" != "" -a ! -d "$src" ] && echo "? Source directory '$src' not found" && exit
[ "$csrc" != "" -a ! -d "$csrc" ] && echo "? Custom source directory '$csrc' not found" && exit
[ "$hdmimode" != "" -a "$hdmigroup" == "" ] && echo "? --hdmimode set but not --hdmigroup" && exit
[ "$hdmigroup" != "" -a "$hdmimode" == "" ] && echo "? --hdmigroup set but not --hdmimode" && exit
[ "$cscript" != "" -a ! -x "$cscript" ] && echo "? cscript '$cscript' is not executable or does not exist" && exit
if [ "$eeprom" != "" ]
then
    if [[ ! "$critical/stable/beta" =~ "$eeprom" ]]
    then
	echo "% --eeprom value '$eeprom' is not one of 'critical/stable/beta'. Continuing..."
    fi
fi    
#
# parse and set ecolors
#
[ "$ecolors" == "" ] && ecolors="blue:gray:red"
IFS=":" read efg ebg ecursor <<< $ecolors
[ "$efg" == "" ] && efg="blue"
[ "$ebg" == "" ] && ebg="gray"
[ "$ecursor" == "" ] && ecursor="red"
ecolors="$efg:$ebg:$ecursor"

poptcheck "$poptions"
#
# Process --apps and --xapps switches
#
findappfile "$apps" appfile     #Gets real @file nam or list of apps into '$appfile'
getapplist "$appfile" apps      #Gets definitive app list into '$apps'
findappfile "$xapps" xappfile   #Ditto for xappfile and xapps
getapplist "$xappfile" xapps
#
# Process the command. Actions are burn, mount, extend, explore, or customize
#
source /usr/local/sdm/sdm-cparse           # Get function defs
if [ $burn -eq 1 ]
then
    [ "$burndev" == "" ] && echo "? No SD card specified" && exit
    if ismounted $burndev
    then
	echo "? Device '$burndev' is mounted"
	exit
    fi
    [ "$hname" == "" ] && echo "% hostname not specified with --host; hostname will not be written to SD Card"
    # Stash burn messages in an array until log on SD Card is mounted and available 
    declare -a burnmsg
    burnmsg+=("$(date +"$datefmt") Burning '$dimg' to SD Card '$burndev'")
    burnmsg+=("$(date +"$datefmt") Burn command line: $cmdline")
    echo "* Copying '$dimg' to SD Card '$burndev'..."
    ddcmd="dd if=$dimg of=$burndev status=progress $ddsw"
    burnmsg+=("$(date +"$datefmt") dd command: $ddcmd")
    echo "$ddcmd"
    $ddcmd
    burnmsg+=("$(date +"$datefmt") SD Card copy completed")
    [ ! -d /mnt/sdm ] && mkdir /mnt/sdm
    sync
    mount -v ${burndev}2 /mnt/sdm
    if [ "$hname" != "" ]
    then
	if [ -d /mnt/sdm/usr/local/sdm/thispi/1piboot -a -f /mnt/sdm/usr/local/sdm/thispi/1piboot/1piboot.conf ]
	then
	    echo "* Setting host name '$hname' onto SD Card image for sdm-firstboot"
	    burnmsg+=("$(date +"$datefmt") Setting host name '$hname' onto SD Card image for sdm-firstboot")
	    sed -i "s/xxxxx/$hname/" /mnt/sdm/usr/local/sdm/thispi/1piboot/1piboot.conf
	else
	    echo "% sdm-firstboot is not configured in this image; hostname will not be written to SD Card"
	fi
    fi
    if [ -d /mnt/sdm/usr/local/sdm -a -x /usr/local/sdm/sdm-logit ]
    then
	echo "* Writing burn log entry on the SD Card..."
	for (( i=0 ; i < ${#burnmsg[@]} ; i++ ))
	do
	    echo "${burnmsg[$i]}" >> /mnt/sdm/etc/sdm/history
	done
	# Enable firstboot service to run
	[ -d /mnt/sdm/usr/local/sdm/thispi ] && touch /mnt/sdm/usr/local/sdm/thispi/run.firstboot
    else
	echo "% IMG is not sdm-enhanced; Burn log entry will not be written to SD Card"
    fi
    umount -v ${burndev}2
    echo "* SD Card is Ready"
    exit
fi

if [ $fdomount -eq 1 ]
then
    domount
    echo ""
    echo "IMG file mounted on /mnt/sdm. BE VERY CAREFUL!"
    echo "Exit the Bash shell to unmount the IMG file"
    echo ""
    stermcolors "$efg" "$ebg" "$ecursor" xt
    bash < $(tty)
    docleanup
    stermcolors "$xtfg" "$xtbg" "$xtcursor"
    exit
fi

if [ $noextend -eq 0 ]
then
    echo "Extending disk image by ${imgext}MB..."
    extendimage "$dimg" "$imgext"
    #
    # Mount the image file into a loop device and resize the file system
    #
    domount
    echo " * (Ignore on-line resizing message) *"
    resize2fs ${loop}p2
fi
if [ $fextendonly -eq 0 ]
then
    domount
else
    docleanup
    exit
fi

if [ -f $sdmdone -o $fexplore -eq 1 ]
then
    spawncmd=""
    #
    # Don't want to do the customization twice, so check for that.
    # If it's already run, just drop into the image for hands on access
    #
    if [ $fexplore -eq 0 ]
    then
	echo ""
	echo "% It appears this image has already been customized"
	echo "% Dropping into nspawn for you to have a look at it..."
    else
	echo ""
	echo "Ready to nspawn into the new image"
    fi
else
    echo ""
    spawncmd="/usr/local/sdm/sdm-phase1"
    #
    # Create and populate /usr/local/sdm tree
    #
    [ ! -d /mnt/sdm/etc/sdm ] && mkdir /mnt/sdm/etc/sdm
    [ ! -d /mnt/sdm/usr/local/sdm ] && mkdir /mnt/sdm/usr/local/sdm \
					     /mnt/sdm/usr/local/sdm/1piboot \
					     /mnt/sdm/usr/local/sdm/thispi \
					     /mnt/sdm/usr/local/sdm/thispi/1piboot
    cp $src/{sdm,sdm-phase0,sdm-phase1,sdm-logit,sdm-cparse} /mnt/sdm/usr/local/sdm
    cp $src/{sdm-apt-cacher,sdm-firstboot} /mnt/sdm/usr/local/sdm
    chmod 755 /mnt/sdm/usr/local/sdm/*
     cp -f $src/1piboot/* /mnt/sdm/usr/local/sdm/1piboot
    cp -f $src/1piboot/* /mnt/sdm/usr/local/sdm/thispi/1piboot
    chmod 755 /mnt/sdm/usr/local/sdm/1piboot/*.sh  /mnt/sdm/usr/local/sdm/thispi/1piboot/*.sh
    [ "$cscript" != "" ] && cp $cscript /mnt/sdm/usr/local/sdm
    chmod 755 /mnt/sdm/usr/local/sdm/*
    # If --apps and/or --xapps are files copy them also. If not, clear the variables for writeconfig
    [ "${appfile:0:1}" == "@" ]  && cp ${appfile:1:999}  /mnt/sdm/usr/local/sdm || appfile=""
    [ "${xappfile:0:1}" == "@" ] && cp ${xappfile:1:999} /mnt/sdm/usr/local/sdm || xappfile=""

    writeconfig                                         #Write arguments into IMG before sdm-logit
    /mnt/sdm/usr/local/sdm/sdm-logit "Configuration Started"
    /mnt/sdm/usr/local/sdm/sdm-logit "Command Line: $cmdline"

    /mnt/sdm/usr/local/sdm/sdm-phase0
    touch $sdmdone
    
    echo ""
    echo "* Ready to nspawn into the new image for Phase 1"
    echo ""
    echo "  sdm will:"
    echo "   * Run /usr/local/sdm/sdm-phase1   Set account passwords, apt-cacher-ng if set"
    echo "                                     run custom Phase 1 script"
    echo "                                     and any installs selected with --poptions"
    echo "     You have selected '$poptions' Install options"
    echo "       out of possible 'firstboot', 'apps', 'noupgrade', 'xwindows', and 'xdmconsole'"
    echo ""
    [ $fbatch -eq 1 ] &&  echo "   * and then exit" || echo "   * and then present a command prompt inside the nspawn container"
fi

echo ""
echo "Type 'exit' when complete"
echo ""
# If spawncmd=="" then phase 1 won't be done, so we change xterm colors here
[ "$spawncmd" == "" ] && stermcolors "$efg" "$ebg" "$ecursor" xt
systemd-nspawn --directory=/mnt/sdm $nspawnsw $spawncmd < $(tty)
docleanup
[ "$spawncmd" == "" ] && stermcolors "$xtfg" "$xtbg" "$xtcursor"

echo "Done"
echo ""
exit

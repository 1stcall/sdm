#!/bin/bash
#
# V6.0
#
# EZ Installer. Run from the bash command line:
#
#    curl -L https://raw.githubusercontent.com/gitbls/sdm/master/EZsdmInstaller | bash
#
# Installs into /usr/local/sdm by default
# You can specify a different directory as the first argument to the script. To use this
# you must download the script to your computer and start it from the command line.
#
# At the moment requires apt-based package installs. Easy to fix, of course. It's only code...
#

function errexit() {
    echo "$1"
    exit 1
}

function askyn() {
    local ans
    echo -n "$1" '[y/n]? ' ; read $2 ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function getosdistro() {
    local osdistro osversion
    if [ -f "/etc/os-release" ]
    then
        osdistro=$(grep ^ID= /etc/os-release | (IFS='='; read a b ; echo $b))
	osversion=$(grep ^VERSION_ID= /etc/os-release | (IFS='='; read a b ; echo $b))
	[ "$osversion" == "" ] && osversion=$(grep ^VERSION= /etc/os-release | (IFS='='; read a b ; echo $b))
    else
        osdistro="unknown"
	osversion="unknown"
    fi
    osdistro=${osdistro%\"} #Strip leading and trailing quotes
    osdistro=${osdistro#\"}
    osdistro=${osdistro,,}  #Lower case
    [ "$osdistro" == "raspbian" ] && osdistro="raspios"
    osversion=${osversion%\"}
    osversion=${osversion#\"}
    echo "$osdistro:$osversion"
}
#
# Check OS Distro and version
#
myscript="$0 $@"
#IFS=":" read osdistro osversion <<< $(getosdistro)
[ "$(which apt)" == "" ] && errexit "? apt not found; cannot install on this system"
#
# Create directories and download sdm
#
[ "$1" != "" ] && dir="$1" || dir="/usr/local/sdm"

[ "$SDMLAN" != "" ] && src=$SDMLAN || src="https://raw.githubusercontent.com/gitbls/sdm/master"
[ "$SDMLAN" != "" ] && curl="scp" || curl="curl"

if [ -d $dir ]
then
    [ ! -w $dir ] && sudo="sudo"      # Directory exists; do we have write access?
else
    [ ! -w ${dir%/*} ] && sudo="sudo" # Directory does not exist; do we have write access to where it will be created?
fi

echo "* Make directory '$dir' and download sdm files to it"

$sudo mkdir -p $dir $dir/1piboot

dlerrors=0
for f in sdm sdm-phase0 sdm-phase1 sdm-cparse sdm-cmdsubs sdm-readparams \
	     sdm-firstboot sdm-apt-cacher sdm-apt \
	     sdm-customphase sdm-apps-example sdm-xapps-example \
	     sdm-cportal sdm-hotspot sdm-logmsg sdm-gburn \
	     1piboot/1piboot.conf
do
    echo "Downloading '$f' to '$dir/$f'"
    if [ "$SDMLAN" == "" ]
    then
	$sudo curl --fail --silent --show-error -L $src/$f -o $dir/$f
	sts=$?
    else
	scp $SDMLAN/$f $dir/$f
	sts=$?
    fi
    if [ ! -f $dir/$f -o $sts -ne 0 ]
    then
	echo "? Error downloading '$src/$f' to $dir"
	dlerrors=$((dlerrors+1))
    fi
done
#
# modify sdm-gburn to point to whereever sdm is installed
#
$sudo sed -i "s#SDMDIR=\".*\"#SDMDIR=\"$dir\"#" $dir/sdm-gburn

$sudo chmod -R 755 $dir/*
$sudo chmod 644 $dir/{sdm-apps-example,sdm-xapps-example} $dir/1piboot/1piboot.conf
echo ""
echo "* Ensure required packages are installed: systemd-container qemu-user-static binfmt-support parted"
[[ $EUID -ne 0 ]] && sudo="sudo"
$sudo apt-get install --yes --no-install-recommends systemd-container qemu-user-static binfmt-support file parted

echo $"
* Invoke sdm with 'sudo $dir/sdm'
  See the sdm documentation at https://github.com/gitbls/sdm

* Pro tip: Add to your .bashrc: alias sdm='sudo $dir/sdm' 
"

if [ $dlerrors -ne 0 ]
then
    echo $"%% The sdm download was not complete
$dlerrors file(s) not downloaded
This must be corrected before you can use sdm
If you need help, open an issue at https://github.com/gitbls/sdm
"
fi

#!/bin/bash
#
# This file is sourced by other sdm scripts
#
function readparams() {
    #
    # Restores the global variables from /etc/sdm/cparams
    #
    local sifs=$IFS rpifun value cf="/etc/sdm/cparams"
    [ "$SDMPHASE0" != "" ] && cf="/mnt/sdm/$cf"
    if [ -f $cf ]
    then
	IFS=":"
	while read rpifun value
	do
	    if [[ ! $rpifun =~ ^\ *# && -n $rpifun ]] # skip comment and malformed lines
            then
		value="${value%%\#*}"    # Del EOL comments
		value="${value%"${value##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
		value="${value%\"}"     # Del opening double-quotes 
		value="${value#\"}"     # Del closing double-quotes 
		value="${value%\'}"     # Del opening single-quotes 
		value="${value#\'}"     # Del closing single-quotes 
		eval "${rpifun}=\"$value\""
	    fi
	done < $cf
	IFS=$sifs
    fi
}

#
# Common functions 
#
function logit {
    #
    # Writes message to /etc/sdm/history
    #
    # $1="message string"
    #
    local mnt=""
    [ "$SDMPHASE0" != "" ] && mnt="/mnt/sdm"
    echo "$(thisdate) $1" >> $mnt/etc/sdm/history
}

function logtoboth {
    #
    # Writes the message to the terminal and also to /etc/sdm/history
    #
    # $1="message string" which will be split up across multiple lines if needed
    #
    local msg="$1"
    local str=() i spc=""
    if [ ${#msg} -le 96 ]
    then
	logit "$msg"
	echo "$msg"
    else
	readarray -t str <<< $(fold -s -w96 <<< $(echo $msg))
	for (( i=0 ; i < ${#str[@]} ; i++))
	do
	    logit "${spc}${str[$i]}"
	    echo "${spc}${str[$i]}"
	    spc="  "
	done
    fi	
}

function bootlog() {
    # Write string in $1 to the system log/journal and /etc/sdm/history.log
    logger "FirstBoot: $1"
    logit "" "> FirstBoot $1"
}

function getpwd() {
    local tmp
    read -s tmp
    echo "$tmp"
}

function changepwd() {
    local user="$1" tpwd="$2" upwd
    if [ "$tpwd" == "" ]
    then
        echo -n "Password for user '$user': " && read -s upwd
        echo ""
    else
        upwd="$tpwd"
    fi
    chpasswd <<EOF
$user:$upwd
EOF
    [ $showpwd -eq 1 ] && logit "> Set password for '$user' to '$upwd'"
}

function askyn() {
    local ans
    echo -n "$1" '[y/n]? ' ; read $2 ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function outlong () {
    #
    # Write the string in $1 to the file in $2
    # If the line is too long, it will be split up
    #
    local str=() i spc=""
    if [ ${#1} -le 96 ]
    then
	echo "$(date +'%Y-%m-%d %H:%M:%S') $1" >> $2
    else
	readarray -t str <<< $(fold -s -w96 <<< $(echo $1))
	for (( i=0 ; i < ${#str[@]} ; i++))
	do
	    echo "$(date +'%Y-%m-%d %H:%M:%S') ${spc}${str[$i]}" >> $2
	    spc="  "
	done
    fi
}

function doapt() {
    #
    # $1 is apt command
    # $2 is $showapt value
    #
    echo "" >> /etc/sdm/apt.log
    outlong "apt $1" "/etc/sdm/apt.log"
    echo "" >> /etc/sdm/apt.log
    if [ "$2" == "1" ]
    then
	apt -q $1 2>&1 | tee -a /etc/sdm/apt.log
    else
	apt -q $1 >> /etc/sdm/apt.log 2>&1
    fi
}

function thisdate() {
    echo  "$(date +"$datefmt")"
}

function ord() {
    #
    # Returns the value in decimal of the character in $1
    # e.g. c="a" ; echo $(ord $c) will print 97
    #
    printf '%d' "'$1"
}

function getfsdf() {
    #
    # $1: fs name (e.g., /, /mnt/sdm, etc)
    # $2: df component: pcent, avail, etc
    #
    echo $(df --output=$2 $1 | tail -1 | (IFS="%" ; read a ; a="${a% }" ; a="${a# }" echo $a))
}

function logfreespace() {
    #
    # Logs the current free space on $dimg
    #
    local dev="/"
    [ "$SDMPHASE0" != "" ] && dev="/mnt/sdm"
    local simdev="IMG"
    [ $dimgdev -eq 1 ] && simdev="Device"
    [ $fdirtree -eq 1 ] && simdev="Directory"
    logtoboth "> $simdev '$dimg' has $(getfsdf $dev avail) 1K-blocks free"
}

function cklogfreespace() {
    #
    # Report if IMG looks full. If not, just log free space
    #
    local dused=$(getfsdf / pcent)
    local simdev="IMG"
    if [ $dused -ge 98 ]
    then
	logtoboth "%%%"
	[ $dimgdev -eq 1 ] && simdev="Device"
	[ $fdirtree -eq 1 ] && simdev="Directory"
	logtoboth "% $simdev '$dimg' is ${dused}% full ($(getfsdf / avail) 1K-blocks free)"
	logtoboth "% Review /etc/sdm/apt.log in the image for insufficient disk space errors"
	logtoboth "% If needed use --extend --xmb nnnn with --customize to create more space"
	logtoboth "%%%"
    else
	logfreespace
    fi
}
    
function gterm1() {
    #
    # $1: control (10:foreground, 11:background, 12:cursor, 13:mousefg, 14:mousebg)
    # $2 varname to set
    #
    local vname="$2" cval
    # Query the xterm for the attribute and read result
    echo -e -n "\e]$1;?\a"
    read -s  -N 40 -t 0.1 cval
    # Trim response to just the color string and return it in the named variable
    cval="${cval:2:${#cval}-3}"   # Strip off ESC] at beginning and ctrl-g at end of string
    cval="${cval##*;}"            # Strip off leading semi-colon
    eval "${vname}=\"$cval\""     # Define a variable for the value
}

function gtermcolors() {
    #
    # Query the xterm for the current terminal colors (cursor, bg, fg)
    # Return in the value named in ${1}cursor ${1}bg ${1}fg (rgb:xxxx/xxxx/xxxx)
    #
    gterm1 10 "${1}fg"
    gterm1 11 "${1}bg"
    gterm1 12 "${1}cursor"
}

function stermcolors() {
    #
    # Arguments are positional, but optional. e.g., "" "" "00" will set only the cursor
    # $1 - foreground
    # $2 - background
    # $3 - cursor
    # $4 - (optional) name of string for saving current colors (see gtermcolors)
    #
    local os=""
    [ "$4" != "" ] && gtermcolors "$4"
    [ "$1" != "" ] && os="\e]10;$1\a"
    [ "$2" != "" ] && os="${os}\e]11;$2\a"
    [ "$3" != "" ] && os="${os}\e]12;$3\a"
    printf "$os"
}

function resetcolors() {
    #
    # Set all colors saved from stermcolors
    #
    local tfg tbg tcursor
    eval "tfg=\$${1}fg ; tbg=\$${1}bg ; tcursor=\$${1}cursor"
    stermcolors "$tfg" "$tbg" "$tcursor"
}

function flashled0() {
    echo 1 | tee /sys/class/leds/led0/brightness > /dev/null 2>&1
    sleep $1
    echo 0 | tee /sys/class/leds/led0/brightness > /dev/null 2>&1
    sleep .2
}

function morseled() {
    local msg="$1"
    local dit=".2" dot=".6" inter=".5"
    for (( i=0 ; i<${#msg} ; i++))
    do
	case "${msg:$i:1}" in
	    .) flashled0 $dit ;;
	    -) flashled0 $dot ;;
	    " ") sleep $inter ;;
	esac
	
    done
}

function iponline() {
    #
    # Test if IP address $1 is online
    # Returns 0 if online, 1 if offline
    #
    local pcnt=1 pingwait=1
    if (ping -c $pcnt -W $pingwait $1 > /dev/null 2>&1 )
    then
	return 0
    else
	return 1
    fi
}

function ckkeymap() {
    [ "$1" == "" ] && return 0
    (grep "^  ${1} " /usr/share/doc/keyboard-configuration/xorg.lst > /dev/null 2>&1) && return 0 || return 1
}

function cklocale() {
    [ "$1" == "" ] && return 0
    (grep "^${1}" /usr/share/i18n/SUPPORTED > /dev/null 2>&1) && return 0 || return 1
    return 0
}

function ckwificountry() {
    [ "$1" == "" ] && return 0
    (grep "^${1}" /usr/share/zoneinfo/iso3166.tab > /dev/null 2>&1) && return 0 || return 1
}

function cktimezone() {
    [ "$1" == "" ] && return 0
    [ -e /usr/share/zoneinfo/$1 ] && return 0 || return 1
}

#!/bin/bash
# This script runs in the nspawn image
#

function doinstalls() {
    #
    # $1 - app list
    # $2 - subject string (e.g., "XWindows Installs" or "Application Installs")
    #
    if [ "$1" != "" ]
    then
	logtoboth "* Start $2"
	logtoboth "> ${2}: $1"
	doapt "install --no-install-recommends -y $1" $showapt
	logtoboth "* $2 Completed"
    else
	logtoboth "> Skip $2 per empty package list"
    fi
}

function upgkeepconf() {
    #
    # Write /etc/apt/apt.conf.d/02sdm-myconf
    # Forcing apt to not query about conf file changes
    # $1 = "--yes" or ""
    # $2 = $showapt or 0 to not display output
    # $3 = 0 [upgrade] or 1 [dist-upgrade]
    #
cat > /etc/apt/apt.conf.d/02sdm-myconf <<EOF
    Dpkg::Options {
   "--force-confdef";
   "--force-confold";
EOF
[ "$3" == "0" ] && upg="upgrade" || upg="dist-upgrade"
doapt "$1 $upg" "$2"
rm -f /etc/apt/apt.conf.d/02sdm-myconf
}

function delaydmenable {
    #
    # Disable the display manager in $1 and set for re-enable during First Boot
    #
    [ $2 -eq "0" ] && return
    dm="$1"
    logtoboth "% Display Manager '$dm' will be disabled when the system first boots"
    logtoboth "  The sdm FirstBoot process will re-enable it"
#    [ -L /etc/systemd/system/display-manager.service ] && rm -f /etc/systemd/system/display-manager.service
    systemctl set-default multi-user.target > /dev/null 2>&1
    cat > /etc/sdm/0piboot/020-$dm-console.sh <<EOF
#!/bin/bash
logger "FirstBoot: Re-Enable Display Manager '$dm'"
#ln -s /lib/systemd/system/$dm.service /etc/systemd/system/display-manager.service
systemctl set-default graphical.target
EOF
    chmod 755 /etc/sdm/0piboot/020-$dm-console.sh
}

#
# Read configuration information from sdm
#
declare -x SDMNSPAWN="Phase1"
source /usr/local/sdm/sdm-cparse ; readparams
#
# If --apt just do those and exit
#
cmd="$1"
cmdoptions="$2"
if [ "$cmd" == "apt" ]
then
    logtoboth "* Start apt maintenance"
    logfreespace "at start of 'apt $cmdoptions'"
    [[ "$cmdoptions" =~ "update" ]] &&  logtoboth "> Perform 'apt update'" && doapt "--yes update"  0
    [[ "$cmdoptions" =~ "upgrade" ]] && logtoboth "> Perform 'apt $upg'" && upgkeepconf --yes 0 $aptdistupgrade
    [[ "$cmdoptions" =~ "autoremove" ]] && logtoboth "> Perform 'apt autoremove'" && doapt "--yes autoremove" 0
    cklogfreespace "at end of 'apt $cmdoptions'"
    logtoboth "* apt maintenance Completed"
    exit 0
fi
#
# Process b2script if specified
#
if [ "$cmd" == "b2script" ]
then
    fn="/etc/sdm/assets/$(basename $cmdoptions)"
    if [ -f $fn ]
    then
	logtoboth "> Execute --b2script '$cmdoptions' [$fn] in nspawn"
	/etc/sdm/assets/$(basename $cmdoptions)
    else
	logtoboth "? Internal error: --b2script file '$fn' not found"
    fi
    exit 0
fi
#
# Process burn-time password changes
#
if [ "$cmd" == "burn-change-passwords" ]
then
    fn="/etc/sdm/assets/$(basename $cmdoptions)"
    if [ -f $fn ]
    then
	logtoboth "* Execute burn-time password changes [$fn] in nspawn"
	/etc/sdm/assets/$(basename $cmdoptions)
    else
	logtoboth "? Internal error: burn-change-passwords script '$fn' not found"
    fi
    exit 0
fi
logtoboth "* Start Phase 1 image customization"
logfreespace "at start of Phase 1 image customization"

logtoboth "*+Phase 1 sdm configuration"
#
# Set up sdm-firstboot service. This service processes some settings that can only be done
# on the first boot of the system.
# Service will be enabled by creating run.firstboot when SD card is burned with sdm
#
logtoboth "> Configure and enable FirstBoot (sdm-firstboot) service"
[ -f /etc/systemd/system/sdm-firstboot.service ] && rm -f /etc/systemd/system/sdm-firstboot.service
cat > /etc/systemd/system/sdm-firstboot.service <<EOF
[Unit]
Description=sdm System FirstBoot Configuration
After=network.target
#Before=rc-local.service

[Service]
Type=forking
ExecStart=/usr/local/sdm/sdm-firstboot
TimeoutSec=0
RemainAfterExit=yes
GuessMainPID=no

[Install]
WantedBy=multi-user.target
EOF

systemctl enable sdm-firstboot > /dev/null 2>&1

logtoboth "*+Phase 1 Network/WiFi/Bluetooth configuration"
#
# I'm pretty sure that wpa_supplicant isn't needed. Let's disable it and see what happens
#
logtoboth "> Disable wpa_supplicant.service, which is only used by Network Manager"
logtoboth "  dhcpcd will start an interface-specific wpa_supplicant if needed"
systemctl disable wpa_supplicant
#
# Set to disable bluetooth and/or wifi if requested
#
if [[ "$disables" =~ "bluetooth" ]]
then
    logtoboth "> Set Bluetooth to disable in FirstBoot per --disable bluetooth"
    fndis="/etc/sdm/0piboot/050-disable-bt.sh"
    [ -f $fndis ] && rm -f $fndis
    cat > $fndis <<EOF
#!/bin/bash
blfile="blacklist-sdm-bluetooth.conf"
logger "FirstBoot Disable bluetooth using /etc/modprobe.d/\$blfile"
printf "blacklist btbcm\nblacklist hci_uart\n" > /etc/modprobe.d/\$blfile
EOF
    chmod 755 $fndis
    systemctl disable hciuart
fi
if [[ "$disables" =~ "wifi" ]]
then
    logtoboth "> Set WiFi to disable in FirstBoot per --disable wifi"
    fndis="/etc/sdm/0piboot/055-disable-wifi.sh"
    [ -f $fndis ] && rm -f $fndis
    cat > $fndis <<EOF
#!/bin/bash
blfile="blacklist-sdm-wifi.conf"
logger "FirstBoot Disable wlan0 using /etc/modprobe.d/\$blfile"
printf "blacklist brcmfmac\nblacklist brcmutil\n" > /etc/modprobe.d/\$blfile
EOF
    chmod 755 $fndis
fi
#
# Set dhcpcd wait if requested
#
if [ "$dhcpcdwait" == "1" ]
then
    mkdir -p /etc/systemd/system/dhcpcd.service.d/
    if [ -f /etc/systemd/system/dhcpcd.service.d/wait.conf ]
    then
	logtoboth "%dhcpcd 'wait for network connection' is already enabled"
    else
	logtoboth "> Enable dhcpcd 'wait for network connection'"
	cat > /etc/systemd/system/dhcpcd.service.d/wait.conf << EOF
[Service]
ExecStart=
ExecStart=/usr/lib/dhcpcd5/dhcpcd -q -w
EOF
    fi
fi
#
# Set up ssh as requested
#
if [ "$ssh" == "service" ]
then
    logtoboth "> Enable SSH service via /boot/ssh"
    touch /boot/ssh
elif [ "$ssh" == "socket" ]
then
    logtoboth "> Enable SSH via ssh.socket per --ssh socket"
    systemctl enable ssh.socket > /dev/null 2>&1
    systemctl disable sshswitch.service > /dev/null 2>&1
elif [ "$ssh" == "none" ]
then
    logtoboth "> Disable SSH per --ssh none"
    systemctl disable ssh.service > /dev/null 2>&1
fi
if [ $fgadgetmode -eq 1 ]
then
    # dtoverlay=dwc2 set in sdm if gadget-mode
    # ssh enabled by default. We don't check if user has disabled.
    logtoboth "> Enable Gadget Mode"
    sed -i "s/rootwait/rootwait modules-load=dwc2,g_ether/" /boot/cmdline.txt
fi

logtoboth "*+Phase 1 User configuration"
samepwd=""
puser="'pi'"
susers="user"
if [ $rootpwd -eq 1 -o "$myuser" != "" ]
then
    [ "$myuser" != "" ] && puser="${puser} and '$myuser'" && susers="users"
    [ $rootpwd -eq 1 ] && puser="${puser} and 'root'" && susers="users"
    usesamepwd=$passwordsame
    if [ $usesamepwd -eq 0 ]
    then
	askyn "** Use same password for $susers $puser" "-n 1" && usesamepwd=1
	echo ""
    elif [ $usesamepwd -eq 1 ]
    then
	logtoboth "> Using same password for $susers $puser"
	[ "$passwordpi" != "" ] && samepwd="$passwordpi" && logtoboth "> Using --password-pi '$passwordpi' for all passwords"
	[ "$samepwd" == "" -a "$passworduser" != "" ] && samepwd="$passworduser" && logtoboth "> Using --password-user password for all passwords"
	[ "$samepwd" == "" -a "$passwordroot" != "" ] && samepwd="$passwordroot" && logtoboth "> Using --password-root password for all passwords"
    fi
    if [ $usesamepwd -eq 1 -a "$samepwd" == "" ]
    then
	echo -n "** Enter password to use for $susers $puser: "
	samepwd=$(getpwd)
	echo ""
    fi
    if [ $rootpwd -eq 1 ]
    then
	logtoboth "> Set root password"
	[ $usesamepwd -eq 1 ] && rpwd="$samepwd" || rpwd="$passwordroot"
	changepwd root "$rpwd"
    else
	logtoboth "> root password not set"
    fi
    if [ "$myuser" != "" ]
    then
	[ "$myuid" != "" ] && xuid="--uid $myuid" || xuid=""
	logtoboth "> Add user '$myuser' and set password"
	# Use useradd/usermod so no prompts=adduser --disabled-login --no-create-home $xuid --add_extra_groups $myuser
	useradd -M -d /home/$myuser $xuid $myuser
	usermod --gid users $myuser
	usermod --groups $groups $myuser
	[ "$samepwd" != "" ] && upwd="$samepwd" || upwd="$passworduser"
	changepwd $myuser "$upwd"
	[ ! -d /home/$myuser ] && mkdir /home/$myuser
	logtoboth "> Set /home/$myuser files ownership to '${myuser}:users'"
	chown -R $myuser.users /home/$myuser
	logtoboth "> Add user '$myuser' to sudoers.d"
	echo "$myuser ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/010_$myuser-nopasswd
	chmod 440 /etc/sudoers.d/010_$myuser-nopasswd
    fi
fi
logtoboth "> Change user 'pi' password"
[ "$samepwd" == "" ] && samepwd="$passwordpi"
changepwd pi "$samepwd"
logtoboth "> Set /home/pi files ownership to 'pi.pi'"
chown -R pi.pi /home/pi
logtoboth "*+Phase 1 System congfiguration"
#
# Handle system settings that can be done in Phase 1
# WiFi Country is done when the system first boots by sdm-firstboot
#
if [ "$locale" != "" ]
then
    logtoboth "> Set Locale to '$locale'"
    #raspi-config do_change_locale "$locale" nonint
    do_raspiconfig do_change_locale "$locale"
fi
if [ "$keymap" != "" ]
then
    logtoboth "> Set Keymap to '$keymap'"
    logtoboth ">!Ignore invoke-rc.d messages"
    #raspi-config do_configure_keyboard "$keymap" nonint
    do_raspiconfig  do_configure_keyboard "$keymap" 
fi
if [ "$timezone" != "" ]
then
    logtoboth "> Set Timezone to '$timezone'"
    #raspi-config do_change_timezone "$timezone" nonint
    do_raspiconfig do_change_timezone "$timezone" 
fi

if [ "$eeprom" != "" ]
then
    logtoboth "> Set rpi-eeprom to '$eeprom' during FirstBoot"
    cat > /etc/sdm/0piboot/030-rpi-eeprom.sh <<EOF
#!/bin/bash
logger "FirstBoot: Set rpi-eeprom to '$eeprom'"
sed /etc/default/rpi-eeprom-update -i -e "s/^FIRMWARE_RELEASE_STATUS.*/FIRMWARE_RELEASE_STATUS=\"$eeprom\"/"
EOF
    chmod 755 /etc/sdm/0piboot/030-rpi-eeprom.sh
fi

#
# Set up apt-cacher-ng client if requested
#
if [ "$aptcache" != "" ]
then
    /usr/local/sdm/sdm-apt-cacher client $aptcache
    logtoboth "> Set image as apt-cacher-ng client using server $aptcache"
fi
#
# Disable cron service and enable cron timers if requsted
#
if [ $cronsystemd -eq 1 ]
then
    logtoboth "> Switch cron to systemd timers"
    cat > /etc/systemd/system/cron@.service <<EOF
[Unit]
Description=%I job for /etc/cron.%I
RefuseManualStart=yes
RefuseManualStop=yes
ConditionDirectoryNotEmpty=/etc/cron.%I

[Service]
Type=oneshot
IgnoreSIGPIPE=no
WorkingDirectory=/
ExecStart=/bin/run-parts --report /etc/cron.%I
EOF
    cat > /etc/systemd/system/cron@.timer <<EOF
[Unit]
Description=%I timer for /etc/cron.%I
PartOf=crontab.target
RefuseManualStart=yes
RefuseManualStop=yes

[Timer]
OnCalendar=%I
Persistent=yes

[Install]
WantedBy=timers.target
EOF
    for timeset in hourly daily monthly weekly
    do
	systemctl enable cron@${timeset}.timer  > /dev/null 2>&1
    done
    systemctl disable cron > /dev/null 2>&1
    systemctl mask    cron > /dev/null 2>&1
fi
#
# Set system journal as requested
#
case "$journal" in
    persistent|volatile|none)
	logtoboth "> Set system journal to '$journal' and disable rsyslog"
	mkdir -p /etc/systemd/journald.conf.d
	cat > /etc/systemd/journald.conf.d/030-sdm-journal.conf <<EOF
[Journal]
Storage=$journal
ForwardToSyslog=no
EOF
	systemctl disable rsyslog
	systemctl mask rsyslog
	;;
    syslog|*)
	logtoboth "> System journal configuration not modified"
	;;
esac
if [ $swapsize -gt 0 ]
then
    logtoboth "> Set Swap Size to ${swapsize}MB"
    sed -i "s/CONF_SWAPSIZE=.*/CONF_SWAPSIZE=$swapsize/" /etc/dphys-swapfile
else
    #
    # Disable swap if requested
    #
    if [[ "$disables" =~ "swap" ]]
    then
	logtoboth "> Disable swapfile per --disable swap"
	systemctl disable dphys-swapfile
	# Don't need to change CONF_SWAPSIZE if dphys-swapfile service is disabled
	#    sed -i "s/CONF_SWAPSIZE=.*/CONF_SWAPSIZE=0/" /etc/dphys-swapfile
    fi
fi
#
# Copy systemd config files to their locations
#
for c in login network resolve system timesync user
do
    nsdfn="sdfn${c}"
    fn="${!nsdfn}"
    if [ "$fn" != "" ]
    then
	tdir=$c
	[ "$c" != "system" -a "$c" != "user" ] && tdir="${tdir}d"
	logtoboth "> Copy systemd '$c' config file '$fn' from /etc/sdm/assets to /etc/systemd/$tdir.conf.d"
	mkdir -p /etc/systemd/$tdir.conf.d
	cp /etc/sdm/assets/$(basename $fn) /etc/systemd/$tdir.conf.d
    fi
done
#
# Disable Triggerhappy service if requested
#
if [[ "$disables" =~ "triggerhappy" ]]
then
    logtoboth "> Disable triggerhappy service per --disable triggerhappy"
    systemctl disable triggerhappy.service
    systemctl disable triggerhappy.socket
    #Eliminate thd.socket errors from udev
    [ -f /lib/udev/rules.d/60-triggerhappy.rules ] && mv /lib/udev/rules.d/60-triggerhappy.rules /lib/udev/rules.d/.60-triggerhappy-sdm.rules
fi
#
# Don't need raspberrypi-net-mods service if we processed the wpa supplicant file
#
if [ "$wpaconf" != "" ]
then
    logtoboth "> Disable check for /boot/wpa_supplicant (raspberrypi-net-mods service)"
    logtoboth "  Not needed since wpa_supplicant.conf is already configured"
    systemctl disable raspberrypi-net-mods.service > /dev/null 2>&1
fi

if ! [[ "$poptions" =~ "noupdate" ]]
then
    logtoboth "> Start 'apt update'"
    logfreespace "at start of 'apt update'"
    doapt "update" $showapt
    logfreespace "at end of 'apt update'"
else
    logtoboth "> Skip 'apt update' per --poption noupdate"
fi    

if [ "$cscript" != "" ]
then
    csfn="/usr/local/sdm/$(basename $cscript)"
    logtoboth "> Run Custom Phase Script '$csfn' Phase 1" 
    $csfn 1
else
    csfn=""
fi

#
# If --loadlocal wifi then disable dhcpcd now. Why wait 1:39 at boot time for nothing?
if [[ "$loadlocal" =~ "wifi" ]]
then
    logtoboth "> Disable dhcpcd per --loadlocal wifi"
    logtoboth "  dhcpcd will be re-enabled at the end of First Boot"
    systemctl disable dhcpcd
fi
#
# These are enabled by use of the --poptions switch
# For example: --poptions apps          installs your personal set of apps
#              --poptions apps:xwindows installs apps and XWindows apps
#
didapt=0
if [[ "$poptions" =~ "|apps|" ]]
then
    logfreespace "at start of Application Installs"
    doinstalls "$apps" "Application Installs"
    logfreespace "at end of Application Installs"
    [ "$apps" != "" ] && didapt=1
fi
if [[ "$poptions" =~ "xwindows" ]] || [[ "$poptions" =~ "xapps" ]]
then
    logfreespace "at start of xapp/XWindows Installs"
    doinstalls "$xapps" "xapp/XWindows Installs"
    [ "$xapps" != "" ] && didapt=1
    logfreespace "at end of xapp/XWindows Installs"
fi

#
# Post-install Configuration
#
logtoboth "* Phase 1 post-app/xapp installation/configuration"
#
# Configure VNC if requested
#
if [ "$vnc" != "" ] && [[ ! "$poptions" =~ "novnc" ]]
then
    logtoboth "* Configure VNC per command switch --vnc $vnc"
    if [ -f /lib/systemd/system/vncserver-x11-serviced.service ]
    then
	! [[ "$vnc" =~ "real" ]] && vnc="real,$vnc"
    fi
    vbase="${vncbase-5900}" ; realvnc=""
    vncp="tigervnc-standalone-server" ; vncserver="" ; citems=() ; sifs="$IFS" ; othervnc="tightvnc"
    IFS=""
    readarray -d, citems <<< "$vnc,"
    n=1
    for res in ${citems[@]}
    do
	res="${res%,}"
	res="${res/$'\n'}"
	if [ "$res" != "" ]
	then
	    # NOTE that this won't work well if user provides any resolutions before vnc server name(s)
	    [[ "$res" =~ "tight" ]] && vncserver="tightvnc" && vncp="tightvncserver" && othervnc="tigervnc" && continue
	    [[ "$res" =~ "tiger" ]] && vncserver="tigervnc" && continue
	    [[ "$res" =~ "real" ]]  && realvnc="realvnc-vnc-server" && continue
	    [ "$vncserver" == "" ] && logtoboth "% --vnc did not specify 'tight' or 'tiger', assuming 'tiger'" && vncserver="tigervnc"
	    port=$(($vbase+$n))
	    logtoboth "> Create $vncserver Service xvnc$n Port $port Resolution $res"
	    cat > /etc/systemd/system/xvnc$n.socket <<EOF
[Unit]
Description=XVNC Server $n

[Socket]
ListenStream=$port
Accept=yes

[Install]
WantedBy=sockets.target
EOF
	    stype="-SecurityTypes None"
	    [ "$vncserver" == "tightvnc" ] && stype="" # TightVNC appears not to support this
	    cat > /etc/systemd/system/xvnc$n@.service <<EOF
[Unit]
Description=XVNC Per-Connection Daemon $n

[Service]
ExecStart=-/usr/bin/X${vncserver} -inetd -query 127.0.0.1 -geometry $res -pn -once $stype
StandardInput=socket
StandardOutput=socket
StandardError=journal
EOF
	    systemctl enable xvnc$n.socket > /dev/null 2>&1
	    n=$(($n+1))
        fi
    done
    #
    # Ensure VNC server is installed (install if not), and ensure one of lightdm or xdm is installed
    #
    if ! ispkginstalled $vncp
    then
	[ -f /usr/bin/X${othervnc} ] && logtoboth "% '$othervnc' is installed as well as the requested '$vncserver'"
	# This VV does not work here. Why? It's done outside of the 'if vnc' block where it works
	#doapt "install --yes $vncp" "$showapt"
    else
	vncp="" 
    fi

    [ ! -f /etc/lightdm/lightdm.conf -a ! -d /etc/X11/xdm -a ! -d /etc/X11/wdm ] && logtoboth "% No sdm-known Display Manager installed; VNC enable will not be done"
    if [ -d /etc/X11/xdm ]
    then
	logtoboth "> Configure xdm for VNC"
	sed -i "s/DisplayManager.requestPort:	0/\!DisplayManager.requestPort:	0/" /etc/X11/xdm/xdm-config
	sed -i "s/\#\*					#any host can get a login window/\*					#any host can get a login window/"  /etc/X11/xdm/Xaccess
    fi
    if [ -f /etc/lightdm/lightdm.conf ]
    then
	logtoboth "> Configure lightdm for VNC"
	sed -i "s/\[XDMCPServer\]/\[XDMCPServer\]\nenabled=true\nport=177/" /etc/lightdm/lightdm.conf
    fi
    if [ -d /etc/X11/wdm ]
    then
	logtoboth "> Configure wdm for VNC"
	sed -i "s/DisplayManager.requestPort:	0/\!DisplayManager.requestPort:	0/" /etc/X11/wdm/wdm-config
    fi
    IFS="$sifs"
    # For some reason this VV works outside the 'if vnc' block, but not inside ;(
    if [ "$vncp" != "" ]
    then
	logtoboth "> Install VNC server $vncp"
	logfreespace "at start of install VNC server $vncp"
	doapt "install --yes $vncp" "$showapt"
	logfreespace "at end of install VNC server $vncp"
    fi
fi
if [ "$realvnc" != "" ]
then
    if ! ispkginstalled $realvnc
    then
	logtoboth "> Install RealVNC server '$realvnc'"
	logfreespace "at start of RealVNC Server install"
	doapt "install --yes $realvnc" "$showapt"
	logfreespace "at end of RealVNC Server install"
    fi
    systemctl disable vncserver-x11-serviced.service > /dev/null 2>&1
    cat > /etc/sdm/0piboot/030-realvnc-server.sh <<EOF
#!/bin/bash
logger "FirstBoot: Enable RealVNC Server vncserver-x11-serviced"
#
# enable RealVNC server during FirstBoot service
#
systemctl enable vncserver-x11-serviced.service
#
# vncserver-virtuald apparently requires an Enterprise license, so disabling it
# If you find it works for you, there are no sdm issues to worry about
# vncserver-virtuald uses port 5999 so there is no confict with using
# sdm-provided xvnc dynamic VNC desktops
#
systemctl disable vncserver-virtuald.service
EOF
    chmod 755 /etc/sdm/0piboot/030-realvnc-server.sh
fi

if [ "$hotspot" != "" ]
then
    /usr/local/sdm/sdm-hotspot
fi

if [[ "$poptions" =~ "samba" ]]
then
    logtoboth "> Install Samba silently"
    hostname $thishost  # For some reason, debconf needs a valid hostname (on the network?) V strange
    echo "samba-common samba-common/workgroup string  WORKGROUP" | debconf-set-selections
    echo "samba-common samba-common/dhcp boolean false" | debconf-set-selections
    echo "samba-common samba-common/do_debconf boolean true" | debconf-set-selections
    doapt "install samba --yes" $showapt
    hostname sdm
    didapt=1
fi

if ! [[ "$poptions" =~ "noupgrade" ]]
then
    [ $aptdistupgrade -eq 0 ] && upg="upgrade" || upg="dist-upgrade"
    logtoboth "> Start 'apt $upg'"
    logfreespace "at start of 'apt $upg'"
    upgkeepconf "-y" "$showapt" $aptdistupgrade
    logfreespace "at end of 'apt $upg'"
    didapt=1
else
    logtoboth "> Skip 'apt upgrade' per --poption noupgrade"
fi    
if [ $didapt -eq 1 ]
then
    if [[ ! "$poptions" =~ "noautoremove" ]]
    then
	logtoboth "> Start 'apt autoremove'"
	logfreespace "at start of 'apt autoremove'"
	doapt "--yes autoremove" $showapt
	logfreespace "at end of 'apt autoremove'"
    else
	logtoboth "> Skip 'apt autoremove' per --poption noautoremove"
    fi
fi

#
# If RasPiOS Full switch to console no login for first boot
#  and set to switch back to graphical autologin after first boot unless 1piboot has an uncommented boot_behav* 
#
if [ -f /usr/bin/startlxde-pi ]
then
    userx=${myuser:-pi}	
    [ "$userx" == "pi" ] && gx=pi || gx=users
    if [ $reboot -eq 1 ]
    then
	logtoboth "> Set RasPiOS Full to 'console no login' for First Boot"
	#SUDO_USER="$userx" raspi-config do_boot_behaviour B1 nonint > /dev/null 2>&1
	do_raspiconfig do_boot_behaviour B1
	if (grep '^boot_behav' /etc/sdm/1piboot.conf > /dev/null 2>&1) || (grep '^boot_behav' /etc/sdm/auto-1piboot.conf > /dev/null 2>&1)
	then
	    logtoboth ">%1piboot.conf 'boot_behaviour' setting will be honored after First Boot"
	else
	    logtoboth ">%Desktop Autologin will be re-enabled after First Boot"
	    echo "boot_behaviour=B4" >> /etc/sdm/auto-1piboot.conf
	fi
    fi
    # Disable piwiz if requested
    if [[ "$disables" =~ "piwiz" ]]
    then
        logtoboth "> Disable running piwiz on first boot"
	mv /etc/xdg/autostart/piwiz.desktop /etc/xdg/autostart/piwiz.desktop.sdm
    fi
    # Set left-handed mouse if requested
    if [ $fmouse -eq 1 ]
    then
	logtoboth "> Enable left-handed mouse for user '$userx'"
	dirx="/home/$userx/.config/lxsession/LXDE-pi"
	mkdir -p $dirx
	cp /etc/xdg/lxsession/LXDE-pi/desktop.conf $dirx
	chmod 644 $dirx/desktop.conf
	sed -i "s/LeftHanded=0/LeftHanded=1/" $dirx/desktop.conf
    fi
    # Copy LXDE config files if requested
    for fm in $lxdeconflist
    do
	cname="${fm}conf"
	fmconf="${!cname}"
	if [ "$fmconf" != "" ]
	then
	    dirx="/home/$userx/.config/$fm"
	    logtoboth "> Copy --lxde-config $fm config file '$(basename $fmconf)' to '$dirx'"
	    mkdir -p $dirx
	    cp /etc/sdm/assets/$(basename $fmconf) $dirx/$fm.conf
	fi
    done
    if [ -d /home/$userx/.config ]
    then
	logtoboth "> Set owner to '$userx:$gx' and protection to 700 on '/home/$userx/.config' directory tree"
	chown -R $userx:$gx /home/$userx/.config
	chmod -R 700 /home/$userx/.config
    fi
fi
#
# If xdm installed, disable it on console if requested
#
if [ -d /etc/X11/xdm ]
then
    # VV This overrides default LISTEN * ; 127.0.0.1 disables xdmcp finder, finder enabled with 0.0.0.0. By default xdmcp finder is enabled
    #echo "LISTEN 0.0.0.0" >> /etc/X11/xdm/Xaccess
    if [[ "$poptions" =~ "nodmconsole" ]]
    then
	logtoboth "> Disable xdm on console"
	sed -i "s/\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/\#\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/"  /etc/X11/xdm/Xservers
	[ -f /etc/sdm/0piboot/030-realvnc-server.sh ] && mv -f /etc/sdm/0piboot/030-realvnc-server.sh /etc/sdm/0piboot/.030-realvnc-server.sh
    else
	delaydmenable xdm $reboot
    fi
fi
#
# Ditto for lightdm and/or wdm
#
[ -d /etc/lightdm ] && delaydmenable lightdm  $reboot # Always disable lightdm/re-enable in FirstBoot
if [ -d /etc/X11/wdm ]
then
    if [[ "$poptions" =~ "nodmconsole" ]]
    then
	logtoboth "> Disable wdm on console"
	sed -i "s/\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/\#\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/"  /etc/X11/wdm/Xservers
	[ -f /etc/sdm/0piboot/030-realvnc-server.sh ] && mv -f /etc/sdm/0piboot/030-realvnc-server.sh /etc/sdm/0piboot/.030-realvnc-server.sh
    else
	delaydmenable wdm $reboot
    fi
fi
logfreespace "at end of Phase 1"
logtoboth "* Phase 1 Completed"

if [ "$csfn" != "" ]
then
    logtoboth "> Run Custom Phase Script '$csfn' post-install"
    $csfn post-install
fi
#
# Check for device out of space and warn if so
#
cklogfreespace "at end of Customization"

if [ $batch -eq 0 ]
then
    logtoboth "* Enter Shell Command Prompt"
    IFS=":" read efg ebg ecursor <<< $ecolors
    stermcolors "$efg" "$ebg" "$ecursor" x1
    bash -i
    resetcolors x1
else
    logtoboth "* Batch Mode exit"
fi

#!/bin/bash
# This script can be run either in an nspawn or on the running system
#
# It helps set up account passwords
#

function getpwd() {
    local tmp
    read -s tmp
    echo "$tmp"
}

function changepwd() {
    local user="$1" upwd tpwd="$2"
    if [ "$tpwd" == "" ]
    then
        echo -n "Password for user '$1': " && read -s upwd
        echo ""
    else
        upwd="$tpwd"
    fi
    chpasswd <<EOF
$user:$upwd
EOF
}

function doinstalls() {
    #
    # $1 - app list
    # $2 - subject string ("XWindows Installs" or "Application Installs")
    #
    if [ "$1" != "" ]
    then
	logtoboth "" "* Start $2"
	logtoboth "" "> ${2}: $1"
	[ $aptconfirm -eq 1 ] && yes="" || yes="-y"
	doapt "install --no-install-recommends $yes $1" $showapt
	logtoboth "" "* $2 Completed"
    else
	logtoboth "" "> Skipping $2"
    fi
}

#
# Read configuration information from sdm
#
source /usr/local/sdm/sdm-cparse ; readparams ""
logtoboth "" "* Start Phase 1 image customization"

samepwd=""
puser="'pi'"
susers="user"
if [ $rootpwd -eq 1 -o "$myuser" != "" ]
then
    [ "$myuser" != "" ] && puser="${puser} and '$myuser'" && susers="users"
    [ $rootpwd -eq 1 ] && puser="${puser} and 'root'" && susers="users"

    if askyn "** Use same password for $susers $puser" "-n 1"
    then
	echo ""
	echo -n "Password: "
	samepwd="$(getpwd Password)"
    fi

    echo ""
    if [ $rootpwd -eq 1 ]
    then
	logtoboth "" "> Change root password"
	changepwd root "$samepwd"
    else
	logtoboth "" "> root password not changed"
    fi

    if [ "$myuser" != "" ]; then
	[ $myuid != "" ] && xuid="--uid $myuid" || xuid=""
	logtoboth "" "> Adding user $myuser..."
	# Use useradd/usermod so no prompts=adduser --disabled-login --no-create-home $xuid --add_extra_groups $myuser
	useradd -M -d /home/$myuser $xuid $myuser
	usermod --gid users $myuser
	usermod --groups dialout,cdrom,floppy,audio,video,plugdev,users $myuser
	changepwd $myuser "$samepwd"
	chown -R $myuser.users /home/$myuser
    fi
fi
logtoboth "" "> Change user 'pi' password"
changepwd pi "$samepwd"
#
# Set up apt-cacher-ng client if requested
#
if [ "$aptcache" != "" ]
then
    /usr/local/sdm/sdm-apt-cacher client $aptcache
    logtoboth "" "> Image set as an apt-cacher-ng client with caching server $aptcache"
fi

logtoboth "" "> Starting apt update"
doapt "update" $showapt       # Do this before Custom script in case it does some installs

if [ "$cscript" != "" ]
then
    csfn="/usr/local/sdm/$(basename $cscript)"
    logtoboth "" "> Run Custom Script '$csfn' Phase 1" 
    $csfn 1
else
    csfn=""
fi

#
# These are enabled by use of the --poptions switch
# For example: --poptions firstboot:apps          does firstboot customization and installs your personal set of apps
#              --poptions firstboot:apps:xwindows does all 3
#
[[ "$poptions" =~ "firstboot" ]] && /usr/local/sdm/sdm-firstboot
[[ "$poptions" =~ "apps" ]]      && doinstalls "$apps" "Application Installs"
[[ "$poptions" =~ "xwindows" ]]  && doinstalls "$xapps" "XWindows Installs"
[ $aptconfirm -eq 1 ] && yes="" || yes="-y"
if ! [[ "$poptions" =~ "noupgrade" ]]
then
    logtoboth "" "> Start 'apt upgrade'"
    doapt "$yes upgrade" $showapt
else
    logtoboth "" "> Skipping 'apt upgrade' per --poption 'noupdate'"
fi    
logtoboth "" "> Starting apt autoremove"
doapt "autoremove -y" $showapt
logtoboth "" "* Phase 1 Completed"

[ "$csfn" != "" ] && logtoboth "" "> Run Custom Script '$csfn' post-install" && $csfn post-install

echo ""
if [ $batch -eq 0 ]
then
    logtoboth "" "* Enter Shell Command Prompt"
    IFS=":" read efg ebg ecursor <<< $ecolors
    stermcolors "$efg" "$ebg" "$ecursor" x1
    bash -i
    resetcolors x1
else
    logtoboth "" "* Batch Mode exit"
    echo ""
fi

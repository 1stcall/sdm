#!/bin/bash
#
# Copies personalization files into an SD card image
#

#
# Read configuration information from sdm (/etc/sdm/cparams)
#
source /mnt/sdm/usr/local/sdm/sdm-cparse ; readparams /mnt/sdm

/mnt/sdm/usr/local/sdm/sdm-logit "Phase 0 Starting"
echo "* Starting Phase 0 image customization"

echo "  Setting up ssh in boot partition"
echo "  (wpa_supplicant.conf will be done later)"
touch /mnt/sdm/boot/ssh
#
# Set HDMI configuration if requested
#
if [ "$hdmigroup" != "" -a "$hdmimode" != "" ]
then
    echo "  Setting hdmigroup and hdmimode in /boot/config.txt configuration"
    sed -i "s/\#hdmi_group=1/hdmi_group=$hdmigroup/" /mnt/sdm/boot/config.txt
    sed -i "s/\#hdmi_mode=1/hdmi_mode=$hdmimode/" /mnt/sdm/boot/config.txt
fi
#
# Set other config.txt settings (if any)
#
if [ "$bootconfig" != "" ]
then
    /mnt/sdm/usr/local/sdm/sdm-logit "Updating /boot/config.txt"
    echo "  Updating /boot/config.txt for bootconfig: $bootconfig"
    readarray -d, citems <<< $bootconfig
    for c in ${citems[@]}
    do
	IFS=":=" read key value <<< $c
	value="${value%,}"
	sed -i "s/\#$key=.*/$key=$value/" /mnt/sdm/boot/config.txt
	/mnt/sdm/usr/local/sdm/sdm-logit "  $key=$value"
	echo "  $key=$value"
    done
fi
if [ "$bootadd" != "" ]
then
    if ! grep -q 'Following items added by sdm --bootadd' /mnt/sdm/boot/config.txt
    then
	/mnt/sdm/usr/local/sdm/sdm-logit "Adding new keys to /boot/config.txt"
	echo "  Updating /boot/config.txt for bootadd: $bootadd"
	echo "# Following items added by sdm --bootadd" >> /mnt/sdm/boot/config.txt
	readarray -d, citems <<< $bootadd
	for c in ${citems[@]}
	do
	    IFS=":=" read key value <<< $c
	    value="${value%,}"
	    echo "$key=$value" >> /mnt/sdm/boot/config.txt
	    /mnt/sdm/usr/local/sdm/sdm-logit "  $key=$value"
	    echo "  $key=$value"
	done
	echo "# Above items added by sdm --bootadd" >> /mnt/sdm/boot/config.txt
    else
	/mnt/sdm/usr/local/sdm/sdm-logit "/boot/config.txt already updated for --bootadd; skipping"
	echo "  /boot/config.txt already updated for --bootadd; skipping"
    fi
fi
#
# Set up sdm-firstboot service. This service sets the wifi country and hostname
# on the first boot of the system. Other parameters are set via 0piboot
# in the nspawn
#
echo "  Setting up sdm-firstboot service"
[ -f /mnt/sdm/etc/systemd/system/sdm-firstboot.service ] && rm -f /mnt/sdm/etc/systemd/system/sdm-firstboot.service
cat > /mnt/sdm/etc/systemd/system/sdm-firstboot.service <<EOF
[Unit]
Description=sdm System FirstBoot Configuration
After=network.target
Before=rc-local.service
ConditionPathExists=/usr/local/sdm/thispi/run.firstboot

[Service]
ExecStart=/usr/local/sdm/sdm-firstboot /usr/local/sdm/thispi/1piboot/1piboot.conf 1
ExecStartPost=/bin/rm /usr/local/sdm/thispi/run.firstboot
Type=oneshot
RemainAfterExit=no

[Install]
WantedBy=multi-user.target
EOF

# Service will be enabled (by creating run.firstboot) when SD card is burned with sdm

[ ! -h /mnt/sdm/etc/systemd/system/multi-user.target.wants/sdm-firstboot.service ] && ln -s /etc/systemd/system/sdm-firstboot.service /mnt/sdm/etc/systemd/system/multi-user.target.wants/sdm-firstboot.service

if [ "$myuser" != "" ]
then
    #
    # do what we can now. Can't create the new user until nspawn. Done in sdm-phase1
    # home directory ownership fixed then as well
    #
    echo "  Add '$myuser' to sudoers.d"
    echo "$myuser ALL=(ALL) NOPASSWD: ALL" > /mnt/sdm/etc/sudoers.d/010_$myuser-nopasswd
    chmod 440 /mnt/sdm/etc/sudoers.d/010_$myuser-nopasswd
    [ ! -d /mnt/sdm/home/$myuser ] && mkdir /mnt/sdm/home/$myuser
fi

if [ "$eeprom" != "" ]
then
    echo "  Set rpi-eeprom to '$eeprom'"
    sed -i "s/critical/$eeprom/" /mnt/sdm/etc/default/rpi-eeprom-update
fi


if [ "$cscript" != "" ]
then
    /mnt/sdm/usr/local/sdm/sdm-logit "Phase 0 Custom Script '$cscript'"
    $cscript 0
fi

/mnt/sdm/usr/local/sdm/sdm-logit "Phase 0 Completed"
echo "* Phase 0 Completed"

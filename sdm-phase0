#!/bin/bash
#
# Copies personalization files into an SD card image
#

function dodt() {
    #
    # $1 = name (either "dtoverlay" or "dtparam"
    # $2 = value(s)
    #
    local dtname="$1" dtvalues="$2" sifs="$IFS" citems=() c
    IFS=""
    if [ "$dtvalues" != "" ]
    then
	logtoboth "> Add new $dtname settings to /mnt/sdm/boot/config.txt"
	echo "" >> /mnt/sdm/boot/config.txt
	echo "# $dtname items added by sdm --$dtname" >> /mnt/sdm/boot/config.txt
	readarray -d\| citems <<< $dtvalues
	for c in ${citems[@]}
	do
	    c="${c%|}"
	    c="${c/$'\n'}"
	    logtoboth ">  $dtname $c"
	    echo "$dtname=$c" >> /mnt/sdm/boot/config.txt
	done
    fi
    IFS="$sifs"
}

function copycufiles() {
    #
    # $1 has list of "|"-separated files to copy
    # $2 has destination directory
    #
    local citems=() fl sifs="$IFS"
    IFS=""
    readarray -d\| citems <<< "$1"
    for fl in ${citems[@]}
    do
	fl="${fl%|}"
	fl="${fl/$'\n'}"
	logtoboth "> Copy file '$fl' to $2"
	cp $fl $2
    done
    IFS="$sifs"
}

#
# Read configuration information from sdm (/etc/sdm/cparams)
#
source /mnt/sdm/usr/local/sdm/sdm-cparse ; readparams

logtoboth "* Start Phase 0 image customization"
#
# These are ordered by: sdm, network, user, system, pi-hardware
# And then alphabetically within each group
#

logtoboth "*+Phase 0 sdm configuration"
if [ "$b2script" != "" ]
then
    logtoboth "> Copy --b2script '$b2script' to /mnt/sdm/etc/sdm/assets"
    cp $b2script /mnt/sdm/etc/sdm/assets
fi
#
# copy hotspot configuration file into the image
#
if [ "$hotspot" != "" ]
then
    logtoboth "> Copy hotspot configuration file to /mnt/sdm/etc/sdm/assets"
    cp $hotspot /mnt/sdm/etc/sdm/assets
fi

logtoboth "*+Phase 0 Network configuration"
if [ "$wpaconf" != "" ]    #First b/c it's most important
then
    logtoboth "> Copy wpa supplicant config from '$wpaconf' to /mnt/sdm/etc/wpa_supplicant/wpa_supplicant.conf"
    # Copy and strip carriage returns just in case
    tr -d '\r' < $wpaconf > /mnt/sdm/etc/wpa_supplicant/wpa_supplicant.conf
else
    logtoboth ">%Skip wpa_supplicant configuration per --nowpa"
fi
#
# Copy dhcpcd.conf extension into the image
#
if [ "$dhcpcd" != "" ]
then
    logtoboth "> Append dhcpcd.conf extension '$dhcpcd' to /mnt/sdm/etc/dhcpcd.conf"
    cat $dhcpcd >> /mnt/sdm/etc/dhcpcd.conf
# Don't need to do it this way, but keep for future just in case
#    echo "dhcpcd=$(basename $dhcpcd)" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
fi
#
# Copy exports file into the image
#
if [ "$exports" != "" ]
then
    logtoboth "> Copy file '$exports' to /mnt/sdm/etc/exports"
    cp $exports /mnt/sdm/etc/exports
fi

logtoboth "*+Phase 0 User configuration"
#
# Copy lxde-config config files into the image
#
for fm in $lxdeconflist
do
    cname="${fm}conf"
    fmconf="${!cname}"
    if [ "$fmconf" != "" ]
    then
	logtoboth "> Copy --lxde-config '$fm' config file '$fmconf' to /mnt/sdm/etc/sdm/assets"
	cp $fmconf /mnt/sdm/etc/sdm/assets
    fi
done
logtoboth "*+Phase 0 System configuration"
#
# Copy any specified cron files
#
for c in d hourly daily weekly monthly
do
    ct="cron$c"
    cf=${!ct}     #  (eval "cf=\$$ct" alternate way)
    [ "$cf" != "" ] && copycufiles "$cf" "/mnt/sdm/etc/cron.$c"
done

#
# Copy fstab extension into the image
#
if [ "$fstab" != "" ]
then
    logtoboth "> Copy fstab extension '$fstab' to /mnt/sdm/etc/sdm/assets and enable for FirstBoot"
    cp $fstab /mnt/sdm/etc/sdm/assets
    echo "fstab=$(basename $fstab)" >> /mnt/sdm/etc/sdm/auto-1piboot.conf
fi

#
# Copy user-specified modprobe config files into the image
#
[ "$modprobe" != "" ] && copycufiles "$modprobe" "/mnt/sdm/etc/modprobe.d"

#
# Copy user-specified motd file into the image
#
[ "$motd" != "" ] && logtoboth "> Copy file '$motd' to /mnt/sdm/etc/motd" && mv /mnt/sdm/etc/motd /mnt/sdm/etc/motd.sdm && cp $motd /mnt/sdm/etc/motd

#
# Add requested command(s) to /etc/rc.local
# ?? Need different character than |. Must be single character for readarray. Candidates: # ! * + ` ~ or an extended character?
#
if [ "$rclocal" != "" ]
then
    logtoboth "> Add commands to /mnt/sdm/etc/rc.local"
    grep -v 'exit 0' /mnt/sdm/etc/rc.local > /mnt/sdm/tmp/rc.local
    sifs="$IFS"
    IFS=""
    readarray -d\| citems <<< "$rclocal"
    for c in ${citems[@]}
    do
	c="${c%|}"
	c="${c/$'\n'}"
	logtoboth ">  $c"
	echo "$c" >> /mnt/sdm/tmp/rc.local
    done
    echo "exit 0" >> /mnt/sdm/tmp/rc.local
    IFS="$sifs"
    mv /mnt/sdm/etc/rc.local /mnt/sdm/etc/rc.local.sdm
    mv /mnt/sdm/tmp/rc.local /mnt/sdm/etc
fi
#
# Copy user-specified sysctl config file into the image
#
[ "$sysctl" != "" ] && copycufiles "$sysctl" "/mnt/sdm/etc/sysctl.d"

#
# Copy systemd config files into the image
#
for c in login network resolve system timesync user
do
    nsdfn="sdfn${c}"
    fn="${!nsdfn}"
    if [ "$fn" != "" ]
    then
	logtoboth "> Copy systemd '$c' config file '$fn' to /mnt/sdm/etc/sdm/assets"
	cp $fn /mnt/sdm/etc/sdm/assets
    fi
done
#
# Copy any specified udev files
#
[ "$udev" != "" ] && copycufiles "$udev" "/mnt/sdm/etc/udev/rules.d"

logtoboth "*+Phase 0 Raspberry Pi-specific configuration"
#
# Set HDMI configuration if requested
#
if [ "$hdmigroup" != "" -a "$hdmimode" != "" ]
then
    logtoboth "> Set 'hdmigroup=$hdmigroup' and 'hdmimode=$hdmimode' in /mnt/sdm/boot/config.txt"
    sed -i "s/\#hdmi_group=1/hdmi_group=$hdmigroup/" /mnt/sdm/boot/config.txt
    sed -i "s/\#hdmi_mode=1/hdmi_mode=$hdmimode/" /mnt/sdm/boot/config.txt
fi
if [ "$hdmiforcehotplug" == "1" ]
then
    logtoboth "> Set 'hdmi_force_hotplug=1' in /mnt/sdm/boot/config.txt"
    sed -i "s/\#hdmi_force_hotplug=1/hdmi_force_hotplug=1/" /mnt/sdm/boot/config.txt
fi
if [ "$hdmiignoreedid" == "1" ]
then
    logtoboth "> set 'hdmi_ignore_edid=0xa5000080' in /mnt/sdm/boot/config.txt"
    sed -i '/hdmi_mode/a \\n# (sdm) Ignore EDID display data\nhdmi_ignore_edid=0xa5000080' /mnt/sdm/boot/config.txt
fi
#
# Set other config.txt settings (if any)
#
if [ "$bootconfig" != "" ]
then
    logtoboth "> Update /mnt/sdm/boot/config.txt for bootconfig: $bootconfig"
    readarray -d, citems <<< $bootconfig
    for c in ${citems[@]}
    do
	IFS=":=" read key value <<< $c
	value="${value%,}"
	sed -i "s/\#$key=.*/$key=$value/" /mnt/sdm/boot/config.txt
	logtoboth ">  $key=$value"
    done
fi
if [ "$bootadd" != "" ]
then
    if ! grep -q 'Following items added by sdm --bootadd' /mnt/sdm/boot/config.txt
    then
	logtoboth "> Add new keys to /mnt/sdm/boot/config.txt"
	logtoboth "> Update /mnt/sdm/boot/config.txt for bootadd: $bootadd"
	echo "# Items added by sdm --bootadd" >> /mnt/sdm/boot/config.txt
	readarray -d, citems <<< $bootadd
	for c in ${citems[@]}
	do
	    IFS=":=" read key value <<< $c
	    value="${value%,}"
	    echo "$key=$value" >> /mnt/sdm/boot/config.txt
	    logtoboth ">  $key=$value"
	done
	echo "# Above items added by sdm --bootadd" >> /mnt/sdm/boot/config.txt
    else
	logtoboth "> /mnt/sdm/boot/config.txt already updated for --bootadd; skipping"
    fi
fi
#
# Process --dtparm and --dtoverlay settings
#
dodt dtoverlay "$dtoverlay"
dodt dtparam   "$dtparam"

if [ "$myuser" != "" ]
then
    #
    # Create user directory now, so that Custom Phase Script can copy into it if desired
    # Can't create the new user and fix directory ownership until sdm-phase1
    #
    [ ! -d /mnt/sdm/home/$myuser ] && logtoboth "> Create user '$myuser' home directory /home/$myuser" && mkdir -p /mnt/sdm/home/$myuser
fi

if [ "$cscript" != "" ]
then
    csfn="/mnt/sdm/usr/local/sdm/$(basename $cscript)"
    logtoboth "> Run Custom Phase Script '$csfn' Phase 0"
    $csfn 0
fi

logtoboth "* Phase 0 Completed"
